//--------------------------------------------------------------------------------
// Auto-generated by Migen (3ffd64c) & LiteX (dd5413bc) on 2021-08-17 15:03:01
//--------------------------------------------------------------------------------
module nexys4ddr(
	output reg serial_tx,
	input wire serial_rx,
	input wire clk,
	input wire cpu_reset,
	output wire led0,
	output wire led1,
	output wire led2,
	output wire led3,
	output wire led4,
	output wire led5,
	output wire led6,
	output wire led7,
	output wire led8,
	output wire led9,
	input wire sw0,
	input wire sw1,
	input wire sw2,
	input wire sw3,
	input wire sw4,
	input wire sw5,
	input wire sw6,
	input wire sw7,
	input wire btnc,
	input wire btnr,
	input wire btnl,
	output wire display_segment0,
	output wire display_segment1,
	output wire display_segment2,
	output wire display_segment3,
	output wire display_segment4,
	output wire display_segment5,
	output wire display_segment6,
	output wire display_segment7,
	output wire display_digit0,
	output wire display_digit1,
	output wire display_digit2,
	output wire display_digit3,
	output wire display_digit4,
	output wire display_digit5,
	output wire display_digit6,
	output wire display_digit7,
	output reg ledRGB1_r,
	output reg ledRGB1_g,
	output reg ledRGB1_b,
	output reg ledRGB2_r,
	output reg ledRGB2_g,
	output reg ledRGB2_b,
	output wire pwm,
	inout wire ir_inout,
	output wire us_trigger,
	input wire us_echo,
	output wire salida1,
	output wire motor_carro0,
	output wire motor_carro1,
	output wire motor_carro2,
	output wire motor_carro3,
	output wire vga_red0,
	output wire vga_red1,
	output wire vga_red2,
	output wire vga_red3,
	output wire vga_green0,
	output wire vga_green1,
	output wire vga_green2,
	output wire vga_green3,
	output wire vga_blue0,
	output wire vga_blue1,
	output wire vga_blue2,
	output wire vga_blue3,
	input wire cam_data_in0,
	input wire cam_data_in1,
	input wire cam_data_in2,
	input wire cam_data_in3,
	input wire cam_data_in4,
	input wire cam_data_in5,
	input wire cam_data_in6,
	input wire cam_data_in7,
	output wire cam_xclk,
	input wire cam_pclk,
	output wire vga_hsync,
	output wire vga_vsync,
	output wire cam_href,
	output wire cam_vsync
);

reg soc_rst = 1'd0;
wire cpu_rst;
reg [1:0] reset_storage = 2'd0;
reg reset_re = 1'd0;
reg [31:0] scratch_storage = 32'd305419896;
reg scratch_re = 1'd0;
wire [31:0] bus_errors_status;
wire bus_errors_we;
reg bus_errors_re = 1'd0;
wire bus_error;
reg [31:0] bus_errors = 32'd0;
wire picorv32_trap;
wire picorv32_reset;
reg [31:0] picorv32_interrupt = 32'd0;
wire [29:0] picorv32_idbus_adr;
wire [31:0] picorv32_idbus_dat_w;
wire [31:0] picorv32_idbus_dat_r;
wire [3:0] picorv32_idbus_sel;
wire picorv32_idbus_cyc;
wire picorv32_idbus_stb;
wire picorv32_idbus_ack;
wire picorv32_idbus_we;
wire [2:0] picorv32_idbus_cti;
wire [1:0] picorv32_idbus_bte;
wire picorv32_idbus_err;
wire picorv32_mem_valid;
wire picorv32_mem_instr;
wire picorv32_mem_ready;
wire [31:0] picorv32_mem_addr;
wire [31:0] picorv32_mem_wdata;
wire [3:0] picorv32_mem_wstrb;
wire [31:0] picorv32_mem_rdata;
wire picorv320;
wire picorv321;
wire [31:0] picorv322;
wire [31:0] picorv323;
wire [3:0] picorv324;
wire picorv325;
wire [31:0] picorv326;
wire [31:0] picorv327;
wire [31:0] picorv328;
wire [31:0] picorv329;
wire [29:0] ram_bus_adr;
wire [31:0] ram_bus_dat_w;
wire [31:0] ram_bus_dat_r;
wire [3:0] ram_bus_sel;
wire ram_bus_cyc;
wire ram_bus_stb;
reg ram_bus_ack = 1'd0;
wire ram_bus_we;
wire [2:0] ram_bus_cti;
wire [1:0] ram_bus_bte;
reg ram_bus_err = 1'd0;
wire [12:0] adr;
wire [31:0] dat_r;
wire [29:0] interface0_ram_bus_adr;
wire [31:0] interface0_ram_bus_dat_w;
wire [31:0] interface0_ram_bus_dat_r;
wire [3:0] interface0_ram_bus_sel;
wire interface0_ram_bus_cyc;
wire interface0_ram_bus_stb;
reg interface0_ram_bus_ack = 1'd0;
wire interface0_ram_bus_we;
wire [2:0] interface0_ram_bus_cti;
wire [1:0] interface0_ram_bus_bte;
reg interface0_ram_bus_err = 1'd0;
wire [10:0] sram0_adr;
wire [31:0] sram0_dat_r;
reg [3:0] sram0_we = 4'd0;
wire [31:0] sram0_dat_w;
wire [29:0] interface1_ram_bus_adr;
wire [31:0] interface1_ram_bus_dat_w;
wire [31:0] interface1_ram_bus_dat_r;
wire [3:0] interface1_ram_bus_sel;
wire interface1_ram_bus_cyc;
wire interface1_ram_bus_stb;
reg interface1_ram_bus_ack = 1'd0;
wire interface1_ram_bus_we;
wire [2:0] interface1_ram_bus_cti;
wire [1:0] interface1_ram_bus_bte;
reg interface1_ram_bus_err = 1'd0;
wire [11:0] sram1_adr;
wire [31:0] sram1_dat_r;
reg [3:0] sram1_we = 4'd0;
wire [31:0] sram1_dat_w;
wire tx_sink_valid;
reg tx_sink_ready = 1'd0;
wire tx_sink_first;
wire tx_sink_last;
wire [7:0] tx_sink_payload_data;
reg [7:0] tx_data = 8'd0;
reg [3:0] tx_count = 4'd0;
reg tx_enable = 1'd0;
reg tx_tick = 1'd0;
reg [31:0] tx_phase = 32'd0;
reg rx_source_valid = 1'd0;
wire rx_source_ready;
reg rx_source_first = 1'd0;
reg rx_source_last = 1'd0;
reg [7:0] rx_source_payload_data = 8'd0;
reg [7:0] rx_data = 8'd0;
reg [3:0] rx_count = 4'd0;
reg rx_enable = 1'd0;
reg rx_tick = 1'd0;
reg [31:0] rx_phase = 32'd0;
wire rx_rx;
reg rx_rx_d = 1'd0;
reg uart_rxtx_re = 1'd0;
wire [7:0] uart_rxtx_r;
reg uart_rxtx_we = 1'd0;
wire [7:0] uart_rxtx_w;
wire uart_txfull_status;
wire uart_txfull_we;
reg uart_txfull_re = 1'd0;
wire uart_rxempty_status;
wire uart_rxempty_we;
reg uart_rxempty_re = 1'd0;
wire uart_irq;
wire uart_tx_status;
reg uart_tx_pending = 1'd0;
wire uart_tx_trigger;
reg uart_tx_clear = 1'd0;
reg uart_tx_trigger_d = 1'd0;
wire uart_rx_status;
reg uart_rx_pending = 1'd0;
wire uart_rx_trigger;
reg uart_rx_clear = 1'd0;
reg uart_rx_trigger_d = 1'd0;
wire uart_tx0;
wire uart_rx0;
reg [1:0] uart_status_status = 2'd0;
wire uart_status_we;
reg uart_status_re = 1'd0;
wire uart_tx1;
wire uart_rx1;
reg [1:0] uart_pending_status = 2'd0;
wire uart_pending_we;
reg uart_pending_re = 1'd0;
reg [1:0] uart_pending_r = 2'd0;
wire uart_tx2;
wire uart_rx2;
reg [1:0] uart_enable_storage = 2'd0;
reg uart_enable_re = 1'd0;
wire uart_txempty_status;
wire uart_txempty_we;
reg uart_txempty_re = 1'd0;
wire uart_rxfull_status;
wire uart_rxfull_we;
reg uart_rxfull_re = 1'd0;
wire uart_uart_sink_valid;
wire uart_uart_sink_ready;
wire uart_uart_sink_first;
wire uart_uart_sink_last;
wire [7:0] uart_uart_sink_payload_data;
wire uart_uart_source_valid;
wire uart_uart_source_ready;
wire uart_uart_source_first;
wire uart_uart_source_last;
wire [7:0] uart_uart_source_payload_data;
wire uart_tx_fifo_sink_valid;
wire uart_tx_fifo_sink_ready;
reg uart_tx_fifo_sink_first = 1'd0;
reg uart_tx_fifo_sink_last = 1'd0;
wire [7:0] uart_tx_fifo_sink_payload_data;
wire uart_tx_fifo_source_valid;
wire uart_tx_fifo_source_ready;
wire uart_tx_fifo_source_first;
wire uart_tx_fifo_source_last;
wire [7:0] uart_tx_fifo_source_payload_data;
wire uart_tx_fifo_re;
reg uart_tx_fifo_readable = 1'd0;
wire uart_tx_fifo_syncfifo_we;
wire uart_tx_fifo_syncfifo_writable;
wire uart_tx_fifo_syncfifo_re;
wire uart_tx_fifo_syncfifo_readable;
wire [9:0] uart_tx_fifo_syncfifo_din;
wire [9:0] uart_tx_fifo_syncfifo_dout;
reg [4:0] uart_tx_fifo_level0 = 5'd0;
reg uart_tx_fifo_replace = 1'd0;
reg [3:0] uart_tx_fifo_produce = 4'd0;
reg [3:0] uart_tx_fifo_consume = 4'd0;
reg [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_tx_fifo_wrport_dat_r;
wire uart_tx_fifo_wrport_we;
wire [9:0] uart_tx_fifo_wrport_dat_w;
wire uart_tx_fifo_do_read;
wire [3:0] uart_tx_fifo_rdport_adr;
wire [9:0] uart_tx_fifo_rdport_dat_r;
wire uart_tx_fifo_rdport_re;
wire [4:0] uart_tx_fifo_level1;
wire [7:0] uart_tx_fifo_fifo_in_payload_data;
wire uart_tx_fifo_fifo_in_first;
wire uart_tx_fifo_fifo_in_last;
wire [7:0] uart_tx_fifo_fifo_out_payload_data;
wire uart_tx_fifo_fifo_out_first;
wire uart_tx_fifo_fifo_out_last;
wire uart_rx_fifo_sink_valid;
wire uart_rx_fifo_sink_ready;
wire uart_rx_fifo_sink_first;
wire uart_rx_fifo_sink_last;
wire [7:0] uart_rx_fifo_sink_payload_data;
wire uart_rx_fifo_source_valid;
wire uart_rx_fifo_source_ready;
wire uart_rx_fifo_source_first;
wire uart_rx_fifo_source_last;
wire [7:0] uart_rx_fifo_source_payload_data;
wire uart_rx_fifo_re;
reg uart_rx_fifo_readable = 1'd0;
wire uart_rx_fifo_syncfifo_we;
wire uart_rx_fifo_syncfifo_writable;
wire uart_rx_fifo_syncfifo_re;
wire uart_rx_fifo_syncfifo_readable;
wire [9:0] uart_rx_fifo_syncfifo_din;
wire [9:0] uart_rx_fifo_syncfifo_dout;
reg [4:0] uart_rx_fifo_level0 = 5'd0;
reg uart_rx_fifo_replace = 1'd0;
reg [3:0] uart_rx_fifo_produce = 4'd0;
reg [3:0] uart_rx_fifo_consume = 4'd0;
reg [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_rx_fifo_wrport_dat_r;
wire uart_rx_fifo_wrport_we;
wire [9:0] uart_rx_fifo_wrport_dat_w;
wire uart_rx_fifo_do_read;
wire [3:0] uart_rx_fifo_rdport_adr;
wire [9:0] uart_rx_fifo_rdport_dat_r;
wire uart_rx_fifo_rdport_re;
wire [4:0] uart_rx_fifo_level1;
wire [7:0] uart_rx_fifo_fifo_in_payload_data;
wire uart_rx_fifo_fifo_in_first;
wire uart_rx_fifo_fifo_in_last;
wire [7:0] uart_rx_fifo_fifo_out_payload_data;
wire uart_rx_fifo_fifo_out_first;
wire uart_rx_fifo_fifo_out_last;
reg [31:0] timer_load_storage = 32'd0;
reg timer_load_re = 1'd0;
reg [31:0] timer_reload_storage = 32'd0;
reg timer_reload_re = 1'd0;
reg timer_en_storage = 1'd0;
reg timer_en_re = 1'd0;
reg timer_update_value_storage = 1'd0;
reg timer_update_value_re = 1'd0;
reg [31:0] timer_value_status = 32'd0;
wire timer_value_we;
reg timer_value_re = 1'd0;
wire timer_irq;
wire timer_zero_status;
reg timer_zero_pending = 1'd0;
wire timer_zero_trigger;
reg timer_zero_clear = 1'd0;
reg timer_zero_trigger_d = 1'd0;
wire timer_zero0;
wire timer_status_status;
wire timer_status_we;
reg timer_status_re = 1'd0;
wire timer_zero1;
wire timer_pending_status;
wire timer_pending_we;
reg timer_pending_re = 1'd0;
reg timer_pending_r = 1'd0;
wire timer_zero2;
reg timer_enable_storage = 1'd0;
reg timer_enable_re = 1'd0;
reg [31:0] timer_value = 32'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg int_rst = 1'd1;
reg [9:0] leds_storage = 10'd0;
reg leds_re = 1'd0;
wire [7:0] switchs_status;
wire switchs_we;
reg switchs_re = 1'd0;
wire [2:0] buttons_status;
wire buttons_we;
reg buttons_re = 1'd0;
reg [2:0] dgt_count = 3'd0;
reg dgt_tick = 1'd0;
reg [17:0] dgt_tick_count = 18'd0;
wire [7:0] displays0;
wire [7:0] displays1;
wire [7:0] displays2;
wire [7:0] displays3;
wire [7:0] displays4;
wire [7:0] displays5;
wire [7:0] displays6;
wire [7:0] displays7;
reg [7:0] dig_0_storage = 8'd0;
reg dig_0_re = 1'd0;
reg [7:0] dig_1_storage = 8'd0;
reg dig_1_re = 1'd0;
reg [7:0] dig_2_storage = 8'd0;
reg dig_2_re = 1'd0;
reg [7:0] dig_3_storage = 8'd0;
reg dig_3_re = 1'd0;
reg [7:0] dig_4_storage = 8'd0;
reg dig_4_re = 1'd0;
reg [7:0] dig_5_storage = 8'd0;
reg dig_5_re = 1'd0;
reg [7:0] dig_6_storage = 8'd0;
reg dig_6_re = 1'd0;
reg [7:0] dig_7_storage = 8'd0;
reg dig_7_re = 1'd0;
wire ledRGB_1_r_enable;
wire [31:0] ledRGB_1_r_width;
wire [31:0] ledRGB_1_r_period;
reg [31:0] ledRGB_1_r_counter = 32'd0;
reg ledRGB_1_r_enable_storage = 1'd0;
reg ledRGB_1_r_enable_re = 1'd0;
reg [31:0] ledRGB_1_r_width_storage = 32'd0;
reg ledRGB_1_r_width_re = 1'd0;
reg [31:0] ledRGB_1_r_period_storage = 32'd0;
reg ledRGB_1_r_period_re = 1'd0;
wire ledRGB_1_g_enable;
wire [31:0] ledRGB_1_g_width;
wire [31:0] ledRGB_1_g_period;
reg [31:0] ledRGB_1_g_counter = 32'd0;
reg ledRGB_1_g_enable_storage = 1'd0;
reg ledRGB_1_g_enable_re = 1'd0;
reg [31:0] ledRGB_1_g_width_storage = 32'd0;
reg ledRGB_1_g_width_re = 1'd0;
reg [31:0] ledRGB_1_g_period_storage = 32'd0;
reg ledRGB_1_g_period_re = 1'd0;
wire ledRGB_1_b_enable;
wire [31:0] ledRGB_1_b_width;
wire [31:0] ledRGB_1_b_period;
reg [31:0] ledRGB_1_b_counter = 32'd0;
reg ledRGB_1_b_enable_storage = 1'd0;
reg ledRGB_1_b_enable_re = 1'd0;
reg [31:0] ledRGB_1_b_width_storage = 32'd0;
reg ledRGB_1_b_width_re = 1'd0;
reg [31:0] ledRGB_1_b_period_storage = 32'd0;
reg ledRGB_1_b_period_re = 1'd0;
wire ledRGB_2_r_enable;
wire [31:0] ledRGB_2_r_width;
wire [31:0] ledRGB_2_r_period;
reg [31:0] ledRGB_2_r_counter = 32'd0;
reg ledRGB_2_r_enable_storage = 1'd0;
reg ledRGB_2_r_enable_re = 1'd0;
reg [31:0] ledRGB_2_r_width_storage = 32'd0;
reg ledRGB_2_r_width_re = 1'd0;
reg [31:0] ledRGB_2_r_period_storage = 32'd0;
reg ledRGB_2_r_period_re = 1'd0;
wire ledRGB_2_g_enable;
wire [31:0] ledRGB_2_g_width;
wire [31:0] ledRGB_2_g_period;
reg [31:0] ledRGB_2_g_counter = 32'd0;
reg ledRGB_2_g_enable_storage = 1'd0;
reg ledRGB_2_g_enable_re = 1'd0;
reg [31:0] ledRGB_2_g_width_storage = 32'd0;
reg ledRGB_2_g_width_re = 1'd0;
reg [31:0] ledRGB_2_g_period_storage = 32'd0;
reg ledRGB_2_g_period_re = 1'd0;
wire ledRGB_2_b_enable;
wire [31:0] ledRGB_2_b_width;
wire [31:0] ledRGB_2_b_period;
reg [31:0] ledRGB_2_b_counter = 32'd0;
reg ledRGB_2_b_enable_storage = 1'd0;
reg ledRGB_2_b_enable_re = 1'd0;
reg [31:0] ledRGB_2_b_width_storage = 32'd0;
reg ledRGB_2_b_width_re = 1'd0;
reg [31:0] ledRGB_2_b_period_storage = 32'd0;
reg ledRGB_2_b_period_re = 1'd0;
reg [2:0] pwm_cntrl_storage = 3'd0;
reg pwm_cntrl_re = 1'd0;
wire [7:0] infrarrojo_cntrl_status;
wire infrarrojo_cntrl_we;
reg infrarrojo_cntrl_re = 1'd0;
reg orden_storage = 1'd0;
reg orden_re = 1'd0;
wire done_status;
wire done_we;
reg done_re = 1'd0;
wire [7:0] d_status;
wire d_we;
reg d_re = 1'd0;
reg mp3_storage = 1'd0;
reg mp3_re = 1'd0;
reg [3:0] motor_storage = 4'd0;
reg motor_re = 1'd0;
reg camara_cntrl_storage = 1'd0;
reg camara_cntrl_re = 1'd0;
reg rs232phytx_state = 1'd0;
reg rs232phytx_next_state = 1'd0;
reg [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg serial_tx_rs232phytx_next_value1 = 1'd0;
reg serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg rs232phyrx_state = 1'd0;
reg rs232phyrx_next_state = 1'd0;
reg [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg [13:0] basesoc_adr = 14'd0;
reg basesoc_we = 1'd0;
reg [31:0] basesoc_dat_w = 32'd0;
wire [31:0] basesoc_dat_r;
wire [29:0] basesoc_wishbone_adr;
wire [31:0] basesoc_wishbone_dat_w;
reg [31:0] basesoc_wishbone_dat_r = 32'd0;
wire [3:0] basesoc_wishbone_sel;
wire basesoc_wishbone_cyc;
wire basesoc_wishbone_stb;
reg basesoc_wishbone_ack = 1'd0;
wire basesoc_wishbone_we;
wire [2:0] basesoc_wishbone_cti;
wire [1:0] basesoc_wishbone_bte;
reg basesoc_wishbone_err = 1'd0;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire request;
wire grant;
reg [3:0] slave_sel = 4'd0;
reg [3:0] slave_sel_r = 4'd0;
reg error = 1'd0;
wire wait_1;
wire done;
reg [19:0] count = 20'd1000000;
wire [13:0] interface0_bank_bus_adr;
wire interface0_bank_bus_we;
wire [31:0] interface0_bank_bus_dat_w;
reg [31:0] interface0_bank_bus_dat_r = 32'd0;
reg csrbank0_in_re = 1'd0;
wire [2:0] csrbank0_in_r;
reg csrbank0_in_we = 1'd0;
wire [2:0] csrbank0_in_w;
wire csrbank0_sel;
wire [13:0] interface1_bank_bus_adr;
wire interface1_bank_bus_we;
wire [31:0] interface1_bank_bus_dat_w;
reg [31:0] interface1_bank_bus_dat_r = 32'd0;
reg csrbank1_enable0_re = 1'd0;
wire csrbank1_enable0_r;
reg csrbank1_enable0_we = 1'd0;
wire csrbank1_enable0_w;
wire csrbank1_sel;
wire [13:0] interface2_bank_bus_adr;
wire interface2_bank_bus_we;
wire [31:0] interface2_bank_bus_dat_w;
reg [31:0] interface2_bank_bus_dat_r = 32'd0;
reg csrbank2_reset0_re = 1'd0;
wire [1:0] csrbank2_reset0_r;
reg csrbank2_reset0_we = 1'd0;
wire [1:0] csrbank2_reset0_w;
reg csrbank2_scratch0_re = 1'd0;
wire [31:0] csrbank2_scratch0_r;
reg csrbank2_scratch0_we = 1'd0;
wire [31:0] csrbank2_scratch0_w;
reg csrbank2_bus_errors_re = 1'd0;
wire [31:0] csrbank2_bus_errors_r;
reg csrbank2_bus_errors_we = 1'd0;
wire [31:0] csrbank2_bus_errors_w;
wire csrbank2_sel;
wire [13:0] interface3_bank_bus_adr;
wire interface3_bank_bus_we;
wire [31:0] interface3_bank_bus_dat_w;
reg [31:0] interface3_bank_bus_dat_r = 32'd0;
reg csrbank3_dig_00_re = 1'd0;
wire [7:0] csrbank3_dig_00_r;
reg csrbank3_dig_00_we = 1'd0;
wire [7:0] csrbank3_dig_00_w;
reg csrbank3_dig_10_re = 1'd0;
wire [7:0] csrbank3_dig_10_r;
reg csrbank3_dig_10_we = 1'd0;
wire [7:0] csrbank3_dig_10_w;
reg csrbank3_dig_20_re = 1'd0;
wire [7:0] csrbank3_dig_20_r;
reg csrbank3_dig_20_we = 1'd0;
wire [7:0] csrbank3_dig_20_w;
reg csrbank3_dig_30_re = 1'd0;
wire [7:0] csrbank3_dig_30_r;
reg csrbank3_dig_30_we = 1'd0;
wire [7:0] csrbank3_dig_30_w;
reg csrbank3_dig_40_re = 1'd0;
wire [7:0] csrbank3_dig_40_r;
reg csrbank3_dig_40_we = 1'd0;
wire [7:0] csrbank3_dig_40_w;
reg csrbank3_dig_50_re = 1'd0;
wire [7:0] csrbank3_dig_50_r;
reg csrbank3_dig_50_we = 1'd0;
wire [7:0] csrbank3_dig_50_w;
reg csrbank3_dig_60_re = 1'd0;
wire [7:0] csrbank3_dig_60_r;
reg csrbank3_dig_60_we = 1'd0;
wire [7:0] csrbank3_dig_60_w;
reg csrbank3_dig_70_re = 1'd0;
wire [7:0] csrbank3_dig_70_r;
reg csrbank3_dig_70_we = 1'd0;
wire [7:0] csrbank3_dig_70_w;
wire csrbank3_sel;
wire [13:0] interface4_bank_bus_adr;
wire interface4_bank_bus_we;
wire [31:0] interface4_bank_bus_dat_w;
reg [31:0] interface4_bank_bus_dat_r = 32'd0;
reg csrbank4_distancia_re = 1'd0;
wire [7:0] csrbank4_distancia_r;
reg csrbank4_distancia_we = 1'd0;
wire [7:0] csrbank4_distancia_w;
wire csrbank4_sel;
wire [13:0] interface5_bank_bus_adr;
wire interface5_bank_bus_we;
wire [31:0] interface5_bank_bus_dat_w;
reg [31:0] interface5_bank_bus_dat_r = 32'd0;
reg csrbank5_r_enable0_re = 1'd0;
wire csrbank5_r_enable0_r;
reg csrbank5_r_enable0_we = 1'd0;
wire csrbank5_r_enable0_w;
reg csrbank5_r_width0_re = 1'd0;
wire [31:0] csrbank5_r_width0_r;
reg csrbank5_r_width0_we = 1'd0;
wire [31:0] csrbank5_r_width0_w;
reg csrbank5_r_period0_re = 1'd0;
wire [31:0] csrbank5_r_period0_r;
reg csrbank5_r_period0_we = 1'd0;
wire [31:0] csrbank5_r_period0_w;
reg csrbank5_g_enable0_re = 1'd0;
wire csrbank5_g_enable0_r;
reg csrbank5_g_enable0_we = 1'd0;
wire csrbank5_g_enable0_w;
reg csrbank5_g_width0_re = 1'd0;
wire [31:0] csrbank5_g_width0_r;
reg csrbank5_g_width0_we = 1'd0;
wire [31:0] csrbank5_g_width0_w;
reg csrbank5_g_period0_re = 1'd0;
wire [31:0] csrbank5_g_period0_r;
reg csrbank5_g_period0_we = 1'd0;
wire [31:0] csrbank5_g_period0_w;
reg csrbank5_b_enable0_re = 1'd0;
wire csrbank5_b_enable0_r;
reg csrbank5_b_enable0_we = 1'd0;
wire csrbank5_b_enable0_w;
reg csrbank5_b_width0_re = 1'd0;
wire [31:0] csrbank5_b_width0_r;
reg csrbank5_b_width0_we = 1'd0;
wire [31:0] csrbank5_b_width0_w;
reg csrbank5_b_period0_re = 1'd0;
wire [31:0] csrbank5_b_period0_r;
reg csrbank5_b_period0_we = 1'd0;
wire [31:0] csrbank5_b_period0_w;
wire csrbank5_sel;
wire [13:0] interface6_bank_bus_adr;
wire interface6_bank_bus_we;
wire [31:0] interface6_bank_bus_dat_w;
reg [31:0] interface6_bank_bus_dat_r = 32'd0;
reg csrbank6_r_enable0_re = 1'd0;
wire csrbank6_r_enable0_r;
reg csrbank6_r_enable0_we = 1'd0;
wire csrbank6_r_enable0_w;
reg csrbank6_r_width0_re = 1'd0;
wire [31:0] csrbank6_r_width0_r;
reg csrbank6_r_width0_we = 1'd0;
wire [31:0] csrbank6_r_width0_w;
reg csrbank6_r_period0_re = 1'd0;
wire [31:0] csrbank6_r_period0_r;
reg csrbank6_r_period0_we = 1'd0;
wire [31:0] csrbank6_r_period0_w;
reg csrbank6_g_enable0_re = 1'd0;
wire csrbank6_g_enable0_r;
reg csrbank6_g_enable0_we = 1'd0;
wire csrbank6_g_enable0_w;
reg csrbank6_g_width0_re = 1'd0;
wire [31:0] csrbank6_g_width0_r;
reg csrbank6_g_width0_we = 1'd0;
wire [31:0] csrbank6_g_width0_w;
reg csrbank6_g_period0_re = 1'd0;
wire [31:0] csrbank6_g_period0_r;
reg csrbank6_g_period0_we = 1'd0;
wire [31:0] csrbank6_g_period0_w;
reg csrbank6_b_enable0_re = 1'd0;
wire csrbank6_b_enable0_r;
reg csrbank6_b_enable0_we = 1'd0;
wire csrbank6_b_enable0_w;
reg csrbank6_b_width0_re = 1'd0;
wire [31:0] csrbank6_b_width0_r;
reg csrbank6_b_width0_we = 1'd0;
wire [31:0] csrbank6_b_width0_w;
reg csrbank6_b_period0_re = 1'd0;
wire [31:0] csrbank6_b_period0_r;
reg csrbank6_b_period0_we = 1'd0;
wire [31:0] csrbank6_b_period0_w;
wire csrbank6_sel;
wire [13:0] interface7_bank_bus_adr;
wire interface7_bank_bus_we;
wire [31:0] interface7_bank_bus_dat_w;
reg [31:0] interface7_bank_bus_dat_r = 32'd0;
reg csrbank7_out0_re = 1'd0;
wire [9:0] csrbank7_out0_r;
reg csrbank7_out0_we = 1'd0;
wire [9:0] csrbank7_out0_w;
wire csrbank7_sel;
wire [13:0] interface8_bank_bus_adr;
wire interface8_bank_bus_we;
wire [31:0] interface8_bank_bus_dat_w;
reg [31:0] interface8_bank_bus_dat_r = 32'd0;
reg csrbank8_entrada0_re = 1'd0;
wire [3:0] csrbank8_entrada0_r;
reg csrbank8_entrada0_we = 1'd0;
wire [3:0] csrbank8_entrada0_w;
wire csrbank8_sel;
wire [13:0] interface9_bank_bus_adr;
wire interface9_bank_bus_we;
wire [31:0] interface9_bank_bus_dat_w;
reg [31:0] interface9_bank_bus_dat_r = 32'd0;
reg csrbank9_pasar10_re = 1'd0;
wire csrbank9_pasar10_r;
reg csrbank9_pasar10_we = 1'd0;
wire csrbank9_pasar10_w;
wire csrbank9_sel;
wire [13:0] interface10_bank_bus_adr;
wire interface10_bank_bus_we;
wire [31:0] interface10_bank_bus_dat_w;
reg [31:0] interface10_bank_bus_dat_r = 32'd0;
reg csrbank10_orden0_re = 1'd0;
wire [2:0] csrbank10_orden0_r;
reg csrbank10_orden0_we = 1'd0;
wire [2:0] csrbank10_orden0_w;
wire csrbank10_sel;
wire [13:0] interface11_bank_bus_adr;
wire interface11_bank_bus_we;
wire [31:0] interface11_bank_bus_dat_w;
reg [31:0] interface11_bank_bus_dat_r = 32'd0;
reg csrbank11_in_re = 1'd0;
wire [7:0] csrbank11_in_r;
reg csrbank11_in_we = 1'd0;
wire [7:0] csrbank11_in_w;
wire csrbank11_sel;
wire [13:0] interface12_bank_bus_adr;
wire interface12_bank_bus_we;
wire [31:0] interface12_bank_bus_dat_w;
reg [31:0] interface12_bank_bus_dat_r = 32'd0;
reg csrbank12_load0_re = 1'd0;
wire [31:0] csrbank12_load0_r;
reg csrbank12_load0_we = 1'd0;
wire [31:0] csrbank12_load0_w;
reg csrbank12_reload0_re = 1'd0;
wire [31:0] csrbank12_reload0_r;
reg csrbank12_reload0_we = 1'd0;
wire [31:0] csrbank12_reload0_w;
reg csrbank12_en0_re = 1'd0;
wire csrbank12_en0_r;
reg csrbank12_en0_we = 1'd0;
wire csrbank12_en0_w;
reg csrbank12_update_value0_re = 1'd0;
wire csrbank12_update_value0_r;
reg csrbank12_update_value0_we = 1'd0;
wire csrbank12_update_value0_w;
reg csrbank12_value_re = 1'd0;
wire [31:0] csrbank12_value_r;
reg csrbank12_value_we = 1'd0;
wire [31:0] csrbank12_value_w;
reg csrbank12_ev_status_re = 1'd0;
wire csrbank12_ev_status_r;
reg csrbank12_ev_status_we = 1'd0;
wire csrbank12_ev_status_w;
reg csrbank12_ev_pending_re = 1'd0;
wire csrbank12_ev_pending_r;
reg csrbank12_ev_pending_we = 1'd0;
wire csrbank12_ev_pending_w;
reg csrbank12_ev_enable0_re = 1'd0;
wire csrbank12_ev_enable0_r;
reg csrbank12_ev_enable0_we = 1'd0;
wire csrbank12_ev_enable0_w;
wire csrbank12_sel;
wire [13:0] interface13_bank_bus_adr;
wire interface13_bank_bus_we;
wire [31:0] interface13_bank_bus_dat_w;
reg [31:0] interface13_bank_bus_dat_r = 32'd0;
reg csrbank13_txfull_re = 1'd0;
wire csrbank13_txfull_r;
reg csrbank13_txfull_we = 1'd0;
wire csrbank13_txfull_w;
reg csrbank13_rxempty_re = 1'd0;
wire csrbank13_rxempty_r;
reg csrbank13_rxempty_we = 1'd0;
wire csrbank13_rxempty_w;
reg csrbank13_ev_status_re = 1'd0;
wire [1:0] csrbank13_ev_status_r;
reg csrbank13_ev_status_we = 1'd0;
wire [1:0] csrbank13_ev_status_w;
reg csrbank13_ev_pending_re = 1'd0;
wire [1:0] csrbank13_ev_pending_r;
reg csrbank13_ev_pending_we = 1'd0;
wire [1:0] csrbank13_ev_pending_w;
reg csrbank13_ev_enable0_re = 1'd0;
wire [1:0] csrbank13_ev_enable0_r;
reg csrbank13_ev_enable0_we = 1'd0;
wire [1:0] csrbank13_ev_enable0_w;
reg csrbank13_txempty_re = 1'd0;
wire csrbank13_txempty_r;
reg csrbank13_txempty_we = 1'd0;
wire csrbank13_txempty_w;
reg csrbank13_rxfull_re = 1'd0;
wire csrbank13_rxfull_r;
reg csrbank13_rxfull_we = 1'd0;
wire csrbank13_rxfull_w;
wire csrbank13_sel;
wire [13:0] interface14_bank_bus_adr;
wire interface14_bank_bus_we;
wire [31:0] interface14_bank_bus_dat_w;
reg [31:0] interface14_bank_bus_dat_r = 32'd0;
reg csrbank14_orden0_re = 1'd0;
wire csrbank14_orden0_r;
reg csrbank14_orden0_we = 1'd0;
wire csrbank14_orden0_w;
reg csrbank14_done_re = 1'd0;
wire csrbank14_done_r;
reg csrbank14_done_we = 1'd0;
wire csrbank14_done_w;
reg csrbank14_d_re = 1'd0;
wire [7:0] csrbank14_d_r;
reg csrbank14_d_we = 1'd0;
wire [7:0] csrbank14_d_w;
wire csrbank14_sel;
wire [13:0] csr_interconnect_adr;
wire csr_interconnect_we;
wire [31:0] csr_interconnect_dat_w;
wire [31:0] csr_interconnect_dat_r;
reg state = 1'd0;
reg next_state = 1'd0;
reg [7:0] array_muxed0 = 8'd0;
reg [29:0] array_muxed1 = 30'd0;
reg [31:0] array_muxed2 = 32'd0;
reg [3:0] array_muxed3 = 4'd0;
reg array_muxed4 = 1'd0;
reg array_muxed5 = 1'd0;
reg array_muxed6 = 1'd0;
reg [2:0] array_muxed7 = 3'd0;
reg [1:0] array_muxed8 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [7:0] xilinxmultiregimpl1_regs0 = 8'd0;
(* async_reg = "true", dont_touch = "true" *) reg [7:0] xilinxmultiregimpl1_regs1 = 8'd0;
wire xilinxmultiregimpl1;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [2:0] xilinxmultiregimpl2_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *) reg [2:0] xilinxmultiregimpl2_regs1 = 3'd0;
wire xilinxmultiregimpl2;

assign picorv32_reset = (soc_rst | cpu_rst);
assign bus_error = error;
always @(*) begin
	picorv32_interrupt <= 32'd0;
	picorv32_interrupt[1] <= timer_irq;
	picorv32_interrupt[0] <= uart_irq;
end
assign bus_errors_status = bus_errors;
assign picorv32_idbus_adr = picorv32_mem_addr[31:2];
assign picorv32_idbus_dat_w = picorv32_mem_wdata;
assign picorv32_idbus_we = (picorv32_mem_wstrb != 1'd0);
assign picorv32_idbus_sel = picorv32_mem_wstrb;
assign picorv32_idbus_cyc = picorv32_mem_valid;
assign picorv32_idbus_stb = picorv32_mem_valid;
assign picorv32_idbus_cti = 1'd0;
assign picorv32_idbus_bte = 1'd0;
assign picorv32_mem_ready = picorv32_idbus_ack;
assign picorv32_mem_rdata = picorv32_idbus_dat_r;
assign adr = ram_bus_adr[12:0];
assign ram_bus_dat_r = dat_r;
always @(*) begin
	sram0_we <= 4'd0;
	sram0_we[0] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[0]);
	sram0_we[1] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[1]);
	sram0_we[2] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[2]);
	sram0_we[3] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[3]);
end
assign sram0_adr = interface0_ram_bus_adr[10:0];
assign interface0_ram_bus_dat_r = sram0_dat_r;
assign sram0_dat_w = interface0_ram_bus_dat_w;
always @(*) begin
	sram1_we <= 4'd0;
	sram1_we[0] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[0]);
	sram1_we[1] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[1]);
	sram1_we[2] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[2]);
	sram1_we[3] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[3]);
end
assign sram1_adr = interface1_ram_bus_adr[11:0];
assign interface1_ram_bus_dat_r = sram1_dat_r;
assign sram1_dat_w = interface1_ram_bus_dat_w;
always @(*) begin
	serial_tx_rs232phytx_next_value1 <= 1'd0;
	serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
	tx_data_rs232phytx_next_value2 <= 8'd0;
	tx_data_rs232phytx_next_value_ce2 <= 1'd0;
	tx_sink_ready <= 1'd0;
	rs232phytx_next_state <= 1'd0;
	tx_enable <= 1'd0;
	tx_count_rs232phytx_next_value0 <= 4'd0;
	tx_count_rs232phytx_next_value_ce0 <= 1'd0;
	rs232phytx_next_state <= rs232phytx_state;
	case (rs232phytx_state)
		1'd1: begin
			tx_enable <= 1'd1;
			if (tx_tick) begin
				serial_tx_rs232phytx_next_value1 <= tx_data;
				serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				tx_count_rs232phytx_next_value0 <= (tx_count + 1'd1);
				tx_count_rs232phytx_next_value_ce0 <= 1'd1;
				tx_data_rs232phytx_next_value2 <= {1'd1, tx_data[7:1]};
				tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				if ((tx_count == 4'd9)) begin
					tx_sink_ready <= 1'd1;
					rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			tx_count_rs232phytx_next_value0 <= 1'd0;
			tx_count_rs232phytx_next_value_ce0 <= 1'd1;
			serial_tx_rs232phytx_next_value1 <= 1'd1;
			serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
			if (tx_sink_valid) begin
				serial_tx_rs232phytx_next_value1 <= 1'd0;
				serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				tx_data_rs232phytx_next_value2 <= tx_sink_payload_data;
				tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
	rx_data_rs232phyrx_next_value1 <= 8'd0;
	rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
	rx_source_valid <= 1'd0;
	rx_source_payload_data <= 8'd0;
	rs232phyrx_next_state <= 1'd0;
	rx_enable <= 1'd0;
	rx_count_rs232phyrx_next_value0 <= 4'd0;
	rs232phyrx_next_state <= rs232phyrx_state;
	case (rs232phyrx_state)
		1'd1: begin
			rx_enable <= 1'd1;
			if (rx_tick) begin
				rx_count_rs232phyrx_next_value0 <= (rx_count + 1'd1);
				rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
				rx_data_rs232phyrx_next_value1 <= {rx_rx, rx_data[7:1]};
				rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((rx_count == 4'd9)) begin
					rx_source_valid <= (rx_rx == 1'd1);
					rx_source_payload_data <= rx_data;
					rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			rx_count_rs232phyrx_next_value0 <= 1'd0;
			rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
				rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
assign uart_uart_sink_valid = rx_source_valid;
assign rx_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = rx_source_first;
assign uart_uart_sink_last = rx_source_last;
assign uart_uart_sink_payload_data = rx_source_payload_data;
assign tx_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = tx_sink_ready;
assign tx_sink_first = uart_uart_source_first;
assign tx_sink_last = uart_uart_source_last;
assign tx_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
	uart_tx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[0])) begin
		uart_tx_clear <= 1'd1;
	end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
	uart_rx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[1])) begin
		uart_rx_clear <= 1'd1;
	end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
	uart_tx_fifo_wrport_adr <= 4'd0;
	if (uart_tx_fifo_replace) begin
		uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
	end else begin
		uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
	end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
	uart_rx_fifo_wrport_adr <= 4'd0;
	if (uart_rx_fifo_replace) begin
		uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
	end else begin
		uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
	end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
	timer_zero_clear <= 1'd0;
	if ((timer_pending_re & timer_pending_r)) begin
		timer_zero_clear <= 1'd1;
	end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign sys_clk = clk;
assign por_clk = clk;
assign sys_rst = int_rst;
assign {led9, led8, led7, led6, led5, led4, led3, led2, led1, led0} = leds_storage;
assign displays0 = dig_0_storage;
assign displays1 = dig_1_storage;
assign displays2 = dig_2_storage;
assign displays3 = dig_3_storage;
assign displays4 = dig_4_storage;
assign displays5 = dig_5_storage;
assign displays6 = dig_6_storage;
assign displays7 = dig_7_storage;
assign {display_digit7, display_digit6, display_digit5, display_digit4, display_digit3, display_digit2, display_digit1, display_digit0} = (~(1'd1 <<< dgt_count));
assign {display_segment7, display_segment6, display_segment5, display_segment4, display_segment3, display_segment2, display_segment1, display_segment0} = (~array_muxed0);
always @(*) begin
	next_state <= 1'd0;
	basesoc_wishbone_dat_r <= 32'd0;
	basesoc_dat_w <= 32'd0;
	basesoc_adr <= 14'd0;
	basesoc_we <= 1'd0;
	basesoc_wishbone_ack <= 1'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			basesoc_wishbone_ack <= 1'd1;
			basesoc_wishbone_dat_r <= basesoc_dat_r;
			next_state <= 1'd0;
		end
		default: begin
			basesoc_dat_w <= basesoc_wishbone_dat_w;
			if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
				basesoc_adr <= basesoc_wishbone_adr;
				basesoc_we <= (basesoc_wishbone_we & (basesoc_wishbone_sel != 1'd0));
				next_state <= 1'd1;
			end
		end
	endcase
end
assign shared_adr = array_muxed1;
assign shared_dat_w = array_muxed2;
assign shared_sel = array_muxed3;
assign shared_cyc = array_muxed4;
assign shared_stb = array_muxed5;
assign shared_we = array_muxed6;
assign shared_cti = array_muxed7;
assign shared_bte = array_muxed8;
assign picorv32_idbus_dat_r = shared_dat_r;
assign picorv32_idbus_ack = (shared_ack & (grant == 1'd0));
assign picorv32_idbus_err = (shared_err & (grant == 1'd0));
assign request = {picorv32_idbus_cyc};
assign grant = 1'd0;
always @(*) begin
	slave_sel <= 4'd0;
	slave_sel[0] <= (shared_adr[29:13] == 1'd0);
	slave_sel[1] <= (shared_adr[29:11] == 12'd2048);
	slave_sel[2] <= (shared_adr[29:12] == 17'd65536);
	slave_sel[3] <= (shared_adr[29:14] == 16'd33280);
end
assign ram_bus_adr = shared_adr;
assign ram_bus_dat_w = shared_dat_w;
assign ram_bus_sel = shared_sel;
assign ram_bus_stb = shared_stb;
assign ram_bus_we = shared_we;
assign ram_bus_cti = shared_cti;
assign ram_bus_bte = shared_bte;
assign interface0_ram_bus_adr = shared_adr;
assign interface0_ram_bus_dat_w = shared_dat_w;
assign interface0_ram_bus_sel = shared_sel;
assign interface0_ram_bus_stb = shared_stb;
assign interface0_ram_bus_we = shared_we;
assign interface0_ram_bus_cti = shared_cti;
assign interface0_ram_bus_bte = shared_bte;
assign interface1_ram_bus_adr = shared_adr;
assign interface1_ram_bus_dat_w = shared_dat_w;
assign interface1_ram_bus_sel = shared_sel;
assign interface1_ram_bus_stb = shared_stb;
assign interface1_ram_bus_we = shared_we;
assign interface1_ram_bus_cti = shared_cti;
assign interface1_ram_bus_bte = shared_bte;
assign basesoc_wishbone_adr = shared_adr;
assign basesoc_wishbone_dat_w = shared_dat_w;
assign basesoc_wishbone_sel = shared_sel;
assign basesoc_wishbone_stb = shared_stb;
assign basesoc_wishbone_we = shared_we;
assign basesoc_wishbone_cti = shared_cti;
assign basesoc_wishbone_bte = shared_bte;
assign ram_bus_cyc = (shared_cyc & slave_sel[0]);
assign interface0_ram_bus_cyc = (shared_cyc & slave_sel[1]);
assign interface1_ram_bus_cyc = (shared_cyc & slave_sel[2]);
assign basesoc_wishbone_cyc = (shared_cyc & slave_sel[3]);
assign shared_err = (((ram_bus_err | interface0_ram_bus_err) | interface1_ram_bus_err) | basesoc_wishbone_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	shared_ack <= 1'd0;
	error <= 1'd0;
	shared_dat_r <= 32'd0;
	shared_ack <= (((ram_bus_ack | interface0_ram_bus_ack) | interface1_ram_bus_ack) | basesoc_wishbone_ack);
	shared_dat_r <= (((({32{slave_sel_r[0]}} & ram_bus_dat_r) | ({32{slave_sel_r[1]}} & interface0_ram_bus_dat_r)) | ({32{slave_sel_r[2]}} & interface1_ram_bus_dat_r)) | ({32{slave_sel_r[3]}} & basesoc_wishbone_dat_r));
	if (done) begin
		shared_dat_r <= 32'd4294967295;
		shared_ack <= 1'd1;
		error <= 1'd1;
	end
end
assign done = (count == 1'd0);
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 2'd2);
assign csrbank0_in_r = interface0_bank_bus_dat_w[2:0];
always @(*) begin
	csrbank0_in_re <= 1'd0;
	csrbank0_in_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank0_in_re <= interface0_bank_bus_we;
		csrbank0_in_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_in_w = buttons_status[2:0];
assign buttons_we = csrbank0_in_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 4'd11);
assign csrbank1_enable0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_enable0_re <= 1'd0;
	csrbank1_enable0_we <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank1_enable0_re <= interface1_bank_bus_we;
		csrbank1_enable0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_enable0_w = camara_cntrl_storage;
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 4'd12);
assign csrbank2_reset0_r = interface2_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank2_reset0_re <= 1'd0;
	csrbank2_reset0_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank2_reset0_re <= interface2_bank_bus_we;
		csrbank2_reset0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_scratch0_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_scratch0_we <= 1'd0;
	csrbank2_scratch0_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank2_scratch0_re <= interface2_bank_bus_we;
		csrbank2_scratch0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_bus_errors_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_bus_errors_re <= 1'd0;
	csrbank2_bus_errors_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank2_bus_errors_re <= interface2_bank_bus_we;
		csrbank2_bus_errors_we <= (~interface2_bank_bus_we);
	end
end
always @(*) begin
	soc_rst <= 1'd0;
	if (reset_re) begin
		soc_rst <= reset_storage[0];
	end
end
assign cpu_rst = reset_storage[1];
assign csrbank2_reset0_w = reset_storage[1:0];
assign csrbank2_scratch0_w = scratch_storage[31:0];
assign csrbank2_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = csrbank2_bus_errors_we;
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 2'd3);
assign csrbank3_dig_00_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank3_dig_00_we <= 1'd0;
	csrbank3_dig_00_re <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank3_dig_00_re <= interface3_bank_bus_we;
		csrbank3_dig_00_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_dig_10_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank3_dig_10_re <= 1'd0;
	csrbank3_dig_10_we <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank3_dig_10_re <= interface3_bank_bus_we;
		csrbank3_dig_10_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_dig_20_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank3_dig_20_we <= 1'd0;
	csrbank3_dig_20_re <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank3_dig_20_re <= interface3_bank_bus_we;
		csrbank3_dig_20_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_dig_30_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank3_dig_30_we <= 1'd0;
	csrbank3_dig_30_re <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank3_dig_30_re <= interface3_bank_bus_we;
		csrbank3_dig_30_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_dig_40_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank3_dig_40_re <= 1'd0;
	csrbank3_dig_40_we <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank3_dig_40_re <= interface3_bank_bus_we;
		csrbank3_dig_40_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_dig_50_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank3_dig_50_we <= 1'd0;
	csrbank3_dig_50_re <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank3_dig_50_re <= interface3_bank_bus_we;
		csrbank3_dig_50_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_dig_60_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank3_dig_60_re <= 1'd0;
	csrbank3_dig_60_we <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank3_dig_60_re <= interface3_bank_bus_we;
		csrbank3_dig_60_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_dig_70_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank3_dig_70_re <= 1'd0;
	csrbank3_dig_70_we <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank3_dig_70_re <= interface3_bank_bus_we;
		csrbank3_dig_70_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_dig_00_w = dig_0_storage[7:0];
assign csrbank3_dig_10_w = dig_1_storage[7:0];
assign csrbank3_dig_20_w = dig_2_storage[7:0];
assign csrbank3_dig_30_w = dig_3_storage[7:0];
assign csrbank3_dig_40_w = dig_4_storage[7:0];
assign csrbank3_dig_50_w = dig_5_storage[7:0];
assign csrbank3_dig_60_w = dig_6_storage[7:0];
assign csrbank3_dig_70_w = dig_7_storage[7:0];
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 3'd7);
assign csrbank4_distancia_r = interface4_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank4_distancia_we <= 1'd0;
	csrbank4_distancia_re <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank4_distancia_re <= interface4_bank_bus_we;
		csrbank4_distancia_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_distancia_w = infrarrojo_cntrl_status[7:0];
assign infrarrojo_cntrl_we = csrbank4_distancia_we;
assign csrbank5_sel = (interface5_bank_bus_adr[13:9] == 3'd4);
assign csrbank5_r_enable0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_r_enable0_we <= 1'd0;
	csrbank5_r_enable0_re <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank5_r_enable0_re <= interface5_bank_bus_we;
		csrbank5_r_enable0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_r_width0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank5_r_width0_re <= 1'd0;
	csrbank5_r_width0_we <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank5_r_width0_re <= interface5_bank_bus_we;
		csrbank5_r_width0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_r_period0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank5_r_period0_re <= 1'd0;
	csrbank5_r_period0_we <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank5_r_period0_re <= interface5_bank_bus_we;
		csrbank5_r_period0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_g_enable0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_g_enable0_we <= 1'd0;
	csrbank5_g_enable0_re <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank5_g_enable0_re <= interface5_bank_bus_we;
		csrbank5_g_enable0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_g_width0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank5_g_width0_re <= 1'd0;
	csrbank5_g_width0_we <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank5_g_width0_re <= interface5_bank_bus_we;
		csrbank5_g_width0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_g_period0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank5_g_period0_we <= 1'd0;
	csrbank5_g_period0_re <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank5_g_period0_re <= interface5_bank_bus_we;
		csrbank5_g_period0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_b_enable0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_b_enable0_we <= 1'd0;
	csrbank5_b_enable0_re <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank5_b_enable0_re <= interface5_bank_bus_we;
		csrbank5_b_enable0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_b_width0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank5_b_width0_re <= 1'd0;
	csrbank5_b_width0_we <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank5_b_width0_re <= interface5_bank_bus_we;
		csrbank5_b_width0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_b_period0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank5_b_period0_we <= 1'd0;
	csrbank5_b_period0_re <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 4'd8))) begin
		csrbank5_b_period0_re <= interface5_bank_bus_we;
		csrbank5_b_period0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_r_enable0_w = ledRGB_1_r_enable_storage;
assign csrbank5_r_width0_w = ledRGB_1_r_width_storage[31:0];
assign csrbank5_r_period0_w = ledRGB_1_r_period_storage[31:0];
assign csrbank5_g_enable0_w = ledRGB_1_g_enable_storage;
assign csrbank5_g_width0_w = ledRGB_1_g_width_storage[31:0];
assign csrbank5_g_period0_w = ledRGB_1_g_period_storage[31:0];
assign csrbank5_b_enable0_w = ledRGB_1_b_enable_storage;
assign csrbank5_b_width0_w = ledRGB_1_b_width_storage[31:0];
assign csrbank5_b_period0_w = ledRGB_1_b_period_storage[31:0];
assign csrbank6_sel = (interface6_bank_bus_adr[13:9] == 3'd5);
assign csrbank6_r_enable0_r = interface6_bank_bus_dat_w[0];
always @(*) begin
	csrbank6_r_enable0_we <= 1'd0;
	csrbank6_r_enable0_re <= 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank6_r_enable0_re <= interface6_bank_bus_we;
		csrbank6_r_enable0_we <= (~interface6_bank_bus_we);
	end
end
assign csrbank6_r_width0_r = interface6_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank6_r_width0_re <= 1'd0;
	csrbank6_r_width0_we <= 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank6_r_width0_re <= interface6_bank_bus_we;
		csrbank6_r_width0_we <= (~interface6_bank_bus_we);
	end
end
assign csrbank6_r_period0_r = interface6_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank6_r_period0_we <= 1'd0;
	csrbank6_r_period0_re <= 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank6_r_period0_re <= interface6_bank_bus_we;
		csrbank6_r_period0_we <= (~interface6_bank_bus_we);
	end
end
assign csrbank6_g_enable0_r = interface6_bank_bus_dat_w[0];
always @(*) begin
	csrbank6_g_enable0_we <= 1'd0;
	csrbank6_g_enable0_re <= 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank6_g_enable0_re <= interface6_bank_bus_we;
		csrbank6_g_enable0_we <= (~interface6_bank_bus_we);
	end
end
assign csrbank6_g_width0_r = interface6_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank6_g_width0_re <= 1'd0;
	csrbank6_g_width0_we <= 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank6_g_width0_re <= interface6_bank_bus_we;
		csrbank6_g_width0_we <= (~interface6_bank_bus_we);
	end
end
assign csrbank6_g_period0_r = interface6_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank6_g_period0_we <= 1'd0;
	csrbank6_g_period0_re <= 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank6_g_period0_re <= interface6_bank_bus_we;
		csrbank6_g_period0_we <= (~interface6_bank_bus_we);
	end
end
assign csrbank6_b_enable0_r = interface6_bank_bus_dat_w[0];
always @(*) begin
	csrbank6_b_enable0_re <= 1'd0;
	csrbank6_b_enable0_we <= 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank6_b_enable0_re <= interface6_bank_bus_we;
		csrbank6_b_enable0_we <= (~interface6_bank_bus_we);
	end
end
assign csrbank6_b_width0_r = interface6_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank6_b_width0_re <= 1'd0;
	csrbank6_b_width0_we <= 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank6_b_width0_re <= interface6_bank_bus_we;
		csrbank6_b_width0_we <= (~interface6_bank_bus_we);
	end
end
assign csrbank6_b_period0_r = interface6_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank6_b_period0_we <= 1'd0;
	csrbank6_b_period0_re <= 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 4'd8))) begin
		csrbank6_b_period0_re <= interface6_bank_bus_we;
		csrbank6_b_period0_we <= (~interface6_bank_bus_we);
	end
end
assign csrbank6_r_enable0_w = ledRGB_2_r_enable_storage;
assign csrbank6_r_width0_w = ledRGB_2_r_width_storage[31:0];
assign csrbank6_r_period0_w = ledRGB_2_r_period_storage[31:0];
assign csrbank6_g_enable0_w = ledRGB_2_g_enable_storage;
assign csrbank6_g_width0_w = ledRGB_2_g_width_storage[31:0];
assign csrbank6_g_period0_w = ledRGB_2_g_period_storage[31:0];
assign csrbank6_b_enable0_w = ledRGB_2_b_enable_storage;
assign csrbank6_b_width0_w = ledRGB_2_b_width_storage[31:0];
assign csrbank6_b_period0_w = ledRGB_2_b_period_storage[31:0];
assign csrbank7_sel = (interface7_bank_bus_adr[13:9] == 1'd0);
assign csrbank7_out0_r = interface7_bank_bus_dat_w[9:0];
always @(*) begin
	csrbank7_out0_we <= 1'd0;
	csrbank7_out0_re <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank7_out0_re <= interface7_bank_bus_we;
		csrbank7_out0_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_out0_w = leds_storage[9:0];
assign csrbank8_sel = (interface8_bank_bus_adr[13:9] == 4'd13);
assign csrbank8_entrada0_r = interface8_bank_bus_dat_w[3:0];
always @(*) begin
	csrbank8_entrada0_re <= 1'd0;
	csrbank8_entrada0_we <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank8_entrada0_re <= interface8_bank_bus_we;
		csrbank8_entrada0_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_entrada0_w = motor_storage[3:0];
assign csrbank9_sel = (interface9_bank_bus_adr[13:9] == 4'd14);
assign csrbank9_pasar10_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_pasar10_re <= 1'd0;
	csrbank9_pasar10_we <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank9_pasar10_re <= interface9_bank_bus_we;
		csrbank9_pasar10_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_pasar10_w = mp3_storage;
assign csrbank10_sel = (interface10_bank_bus_adr[13:9] == 3'd6);
assign csrbank10_orden0_r = interface10_bank_bus_dat_w[2:0];
always @(*) begin
	csrbank10_orden0_re <= 1'd0;
	csrbank10_orden0_we <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank10_orden0_re <= interface10_bank_bus_we;
		csrbank10_orden0_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_orden0_w = pwm_cntrl_storage[2:0];
assign csrbank11_sel = (interface11_bank_bus_adr[13:9] == 1'd1);
assign csrbank11_in_r = interface11_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank11_in_re <= 1'd0;
	csrbank11_in_we <= 1'd0;
	if ((csrbank11_sel & (interface11_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank11_in_re <= interface11_bank_bus_we;
		csrbank11_in_we <= (~interface11_bank_bus_we);
	end
end
assign csrbank11_in_w = switchs_status[7:0];
assign switchs_we = csrbank11_in_we;
assign csrbank12_sel = (interface12_bank_bus_adr[13:9] == 4'd15);
assign csrbank12_load0_r = interface12_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank12_load0_re <= 1'd0;
	csrbank12_load0_we <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank12_load0_re <= interface12_bank_bus_we;
		csrbank12_load0_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_reload0_r = interface12_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank12_reload0_we <= 1'd0;
	csrbank12_reload0_re <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank12_reload0_re <= interface12_bank_bus_we;
		csrbank12_reload0_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_en0_r = interface12_bank_bus_dat_w[0];
always @(*) begin
	csrbank12_en0_re <= 1'd0;
	csrbank12_en0_we <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank12_en0_re <= interface12_bank_bus_we;
		csrbank12_en0_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_update_value0_r = interface12_bank_bus_dat_w[0];
always @(*) begin
	csrbank12_update_value0_we <= 1'd0;
	csrbank12_update_value0_re <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank12_update_value0_re <= interface12_bank_bus_we;
		csrbank12_update_value0_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_value_r = interface12_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank12_value_we <= 1'd0;
	csrbank12_value_re <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank12_value_re <= interface12_bank_bus_we;
		csrbank12_value_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_ev_status_r = interface12_bank_bus_dat_w[0];
always @(*) begin
	csrbank12_ev_status_re <= 1'd0;
	csrbank12_ev_status_we <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank12_ev_status_re <= interface12_bank_bus_we;
		csrbank12_ev_status_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_ev_pending_r = interface12_bank_bus_dat_w[0];
always @(*) begin
	csrbank12_ev_pending_re <= 1'd0;
	csrbank12_ev_pending_we <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank12_ev_pending_re <= interface12_bank_bus_we;
		csrbank12_ev_pending_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_ev_enable0_r = interface12_bank_bus_dat_w[0];
always @(*) begin
	csrbank12_ev_enable0_we <= 1'd0;
	csrbank12_ev_enable0_re <= 1'd0;
	if ((csrbank12_sel & (interface12_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank12_ev_enable0_re <= interface12_bank_bus_we;
		csrbank12_ev_enable0_we <= (~interface12_bank_bus_we);
	end
end
assign csrbank12_load0_w = timer_load_storage[31:0];
assign csrbank12_reload0_w = timer_reload_storage[31:0];
assign csrbank12_en0_w = timer_en_storage;
assign csrbank12_update_value0_w = timer_update_value_storage;
assign csrbank12_value_w = timer_value_status[31:0];
assign timer_value_we = csrbank12_value_we;
assign timer_status_status = timer_zero0;
assign csrbank12_ev_status_w = timer_status_status;
assign timer_status_we = csrbank12_ev_status_we;
assign timer_pending_status = timer_zero1;
assign csrbank12_ev_pending_w = timer_pending_status;
assign timer_pending_we = csrbank12_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csrbank12_ev_enable0_w = timer_enable_storage;
assign csrbank13_sel = (interface13_bank_bus_adr[13:9] == 5'd16);
assign uart_rxtx_r = interface13_bank_bus_dat_w[7:0];
always @(*) begin
	uart_rxtx_we <= 1'd0;
	uart_rxtx_re <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 1'd0))) begin
		uart_rxtx_re <= interface13_bank_bus_we;
		uart_rxtx_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_txfull_r = interface13_bank_bus_dat_w[0];
always @(*) begin
	csrbank13_txfull_re <= 1'd0;
	csrbank13_txfull_we <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank13_txfull_re <= interface13_bank_bus_we;
		csrbank13_txfull_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_rxempty_r = interface13_bank_bus_dat_w[0];
always @(*) begin
	csrbank13_rxempty_re <= 1'd0;
	csrbank13_rxempty_we <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank13_rxempty_re <= interface13_bank_bus_we;
		csrbank13_rxempty_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_ev_status_r = interface13_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank13_ev_status_we <= 1'd0;
	csrbank13_ev_status_re <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank13_ev_status_re <= interface13_bank_bus_we;
		csrbank13_ev_status_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_ev_pending_r = interface13_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank13_ev_pending_we <= 1'd0;
	csrbank13_ev_pending_re <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank13_ev_pending_re <= interface13_bank_bus_we;
		csrbank13_ev_pending_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_ev_enable0_r = interface13_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank13_ev_enable0_re <= 1'd0;
	csrbank13_ev_enable0_we <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank13_ev_enable0_re <= interface13_bank_bus_we;
		csrbank13_ev_enable0_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_txempty_r = interface13_bank_bus_dat_w[0];
always @(*) begin
	csrbank13_txempty_we <= 1'd0;
	csrbank13_txempty_re <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank13_txempty_re <= interface13_bank_bus_we;
		csrbank13_txempty_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_rxfull_r = interface13_bank_bus_dat_w[0];
always @(*) begin
	csrbank13_rxfull_we <= 1'd0;
	csrbank13_rxfull_re <= 1'd0;
	if ((csrbank13_sel & (interface13_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank13_rxfull_re <= interface13_bank_bus_we;
		csrbank13_rxfull_we <= (~interface13_bank_bus_we);
	end
end
assign csrbank13_txfull_w = uart_txfull_status;
assign uart_txfull_we = csrbank13_txfull_we;
assign csrbank13_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csrbank13_rxempty_we;
always @(*) begin
	uart_status_status <= 2'd0;
	uart_status_status[0] <= uart_tx0;
	uart_status_status[1] <= uart_rx0;
end
assign csrbank13_ev_status_w = uart_status_status[1:0];
assign uart_status_we = csrbank13_ev_status_we;
always @(*) begin
	uart_pending_status <= 2'd0;
	uart_pending_status[0] <= uart_tx1;
	uart_pending_status[1] <= uart_rx1;
end
assign csrbank13_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = csrbank13_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csrbank13_ev_enable0_w = uart_enable_storage[1:0];
assign csrbank13_txempty_w = uart_txempty_status;
assign uart_txempty_we = csrbank13_txempty_we;
assign csrbank13_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csrbank13_rxfull_we;
assign csrbank14_sel = (interface14_bank_bus_adr[13:9] == 4'd8);
assign csrbank14_orden0_r = interface14_bank_bus_dat_w[0];
always @(*) begin
	csrbank14_orden0_we <= 1'd0;
	csrbank14_orden0_re <= 1'd0;
	if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank14_orden0_re <= interface14_bank_bus_we;
		csrbank14_orden0_we <= (~interface14_bank_bus_we);
	end
end
assign csrbank14_done_r = interface14_bank_bus_dat_w[0];
always @(*) begin
	csrbank14_done_re <= 1'd0;
	csrbank14_done_we <= 1'd0;
	if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank14_done_re <= interface14_bank_bus_we;
		csrbank14_done_we <= (~interface14_bank_bus_we);
	end
end
assign csrbank14_d_r = interface14_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank14_d_we <= 1'd0;
	csrbank14_d_re <= 1'd0;
	if ((csrbank14_sel & (interface14_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank14_d_re <= interface14_bank_bus_we;
		csrbank14_d_we <= (~interface14_bank_bus_we);
	end
end
assign csrbank14_orden0_w = orden_storage;
assign csrbank14_done_w = done_status;
assign done_we = csrbank14_done_we;
assign csrbank14_d_w = d_status[7:0];
assign d_we = csrbank14_d_we;
assign csr_interconnect_adr = basesoc_adr;
assign csr_interconnect_we = basesoc_we;
assign csr_interconnect_dat_w = basesoc_dat_w;
assign basesoc_dat_r = csr_interconnect_dat_r;
assign interface0_bank_bus_adr = csr_interconnect_adr;
assign interface1_bank_bus_adr = csr_interconnect_adr;
assign interface2_bank_bus_adr = csr_interconnect_adr;
assign interface3_bank_bus_adr = csr_interconnect_adr;
assign interface4_bank_bus_adr = csr_interconnect_adr;
assign interface5_bank_bus_adr = csr_interconnect_adr;
assign interface6_bank_bus_adr = csr_interconnect_adr;
assign interface7_bank_bus_adr = csr_interconnect_adr;
assign interface8_bank_bus_adr = csr_interconnect_adr;
assign interface9_bank_bus_adr = csr_interconnect_adr;
assign interface10_bank_bus_adr = csr_interconnect_adr;
assign interface11_bank_bus_adr = csr_interconnect_adr;
assign interface12_bank_bus_adr = csr_interconnect_adr;
assign interface13_bank_bus_adr = csr_interconnect_adr;
assign interface14_bank_bus_adr = csr_interconnect_adr;
assign interface0_bank_bus_we = csr_interconnect_we;
assign interface1_bank_bus_we = csr_interconnect_we;
assign interface2_bank_bus_we = csr_interconnect_we;
assign interface3_bank_bus_we = csr_interconnect_we;
assign interface4_bank_bus_we = csr_interconnect_we;
assign interface5_bank_bus_we = csr_interconnect_we;
assign interface6_bank_bus_we = csr_interconnect_we;
assign interface7_bank_bus_we = csr_interconnect_we;
assign interface8_bank_bus_we = csr_interconnect_we;
assign interface9_bank_bus_we = csr_interconnect_we;
assign interface10_bank_bus_we = csr_interconnect_we;
assign interface11_bank_bus_we = csr_interconnect_we;
assign interface12_bank_bus_we = csr_interconnect_we;
assign interface13_bank_bus_we = csr_interconnect_we;
assign interface14_bank_bus_we = csr_interconnect_we;
assign interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface7_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface8_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface9_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface10_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface11_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface12_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface13_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface14_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = ((((((((((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface5_bank_bus_dat_r) | interface6_bank_bus_dat_r) | interface7_bank_bus_dat_r) | interface8_bank_bus_dat_r) | interface9_bank_bus_dat_r) | interface10_bank_bus_dat_r) | interface11_bank_bus_dat_r) | interface12_bank_bus_dat_r) | interface13_bank_bus_dat_r) | interface14_bank_bus_dat_r);
always @(*) begin
	array_muxed0 <= 8'd0;
	case (dgt_count)
		1'd0: begin
			array_muxed0 <= displays0;
		end
		1'd1: begin
			array_muxed0 <= displays1;
		end
		2'd2: begin
			array_muxed0 <= displays2;
		end
		2'd3: begin
			array_muxed0 <= displays3;
		end
		3'd4: begin
			array_muxed0 <= displays4;
		end
		3'd5: begin
			array_muxed0 <= displays5;
		end
		3'd6: begin
			array_muxed0 <= displays6;
		end
		default: begin
			array_muxed0 <= displays7;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 30'd0;
	case (grant)
		default: begin
			array_muxed1 <= picorv32_idbus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 32'd0;
	case (grant)
		default: begin
			array_muxed2 <= picorv32_idbus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 4'd0;
	case (grant)
		default: begin
			array_muxed3 <= picorv32_idbus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (grant)
		default: begin
			array_muxed4 <= picorv32_idbus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (grant)
		default: begin
			array_muxed5 <= picorv32_idbus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 1'd0;
	case (grant)
		default: begin
			array_muxed6 <= picorv32_idbus_we;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 3'd0;
	case (grant)
		default: begin
			array_muxed7 <= picorv32_idbus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed8 <= 2'd0;
	case (grant)
		default: begin
			array_muxed8 <= picorv32_idbus_bte;
		end
	endcase
end
assign rx_rx = xilinxmultiregimpl0_regs1;
assign switchs_status = xilinxmultiregimpl1_regs1;
assign xilinxmultiregimpl1 = {sw7, sw6, sw5, sw4, sw3, sw2, sw1, sw0};
assign buttons_status = xilinxmultiregimpl2_regs1;
assign xilinxmultiregimpl2 = {btnl, btnr, btnc};
assign ledRGB_1_r_enable = ledRGB_1_r_enable_storage;
assign ledRGB_1_r_width = ledRGB_1_r_width_storage;
assign ledRGB_1_r_period = ledRGB_1_r_period_storage;
assign ledRGB_1_g_enable = ledRGB_1_g_enable_storage;
assign ledRGB_1_g_width = ledRGB_1_g_width_storage;
assign ledRGB_1_g_period = ledRGB_1_g_period_storage;
assign ledRGB_1_b_enable = ledRGB_1_b_enable_storage;
assign ledRGB_1_b_width = ledRGB_1_b_width_storage;
assign ledRGB_1_b_period = ledRGB_1_b_period_storage;
assign ledRGB_2_r_enable = ledRGB_2_r_enable_storage;
assign ledRGB_2_r_width = ledRGB_2_r_width_storage;
assign ledRGB_2_r_period = ledRGB_2_r_period_storage;
assign ledRGB_2_g_enable = ledRGB_2_g_enable_storage;
assign ledRGB_2_g_width = ledRGB_2_g_width_storage;
assign ledRGB_2_g_period = ledRGB_2_g_period_storage;
assign ledRGB_2_b_enable = ledRGB_2_b_enable_storage;
assign ledRGB_2_b_width = ledRGB_2_b_width_storage;
assign ledRGB_2_b_period = ledRGB_2_b_period_storage;

always @(posedge por_clk) begin
	int_rst <= (~cpu_reset);
end

always @(posedge sys_clk) begin
	if ((bus_errors != 32'd4294967295)) begin
		if (bus_error) begin
			bus_errors <= (bus_errors + 1'd1);
		end
	end
	ram_bus_ack <= 1'd0;
	if (((ram_bus_cyc & ram_bus_stb) & (~ram_bus_ack))) begin
		ram_bus_ack <= 1'd1;
	end
	interface0_ram_bus_ack <= 1'd0;
	if (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & (~interface0_ram_bus_ack))) begin
		interface0_ram_bus_ack <= 1'd1;
	end
	interface1_ram_bus_ack <= 1'd0;
	if (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & (~interface1_ram_bus_ack))) begin
		interface1_ram_bus_ack <= 1'd1;
	end
	{tx_tick, tx_phase} <= 23'd4947802;
	if (tx_enable) begin
		{tx_tick, tx_phase} <= (tx_phase + 23'd4947802);
	end
	rs232phytx_state <= rs232phytx_next_state;
	if (tx_count_rs232phytx_next_value_ce0) begin
		tx_count <= tx_count_rs232phytx_next_value0;
	end
	if (serial_tx_rs232phytx_next_value_ce1) begin
		serial_tx <= serial_tx_rs232phytx_next_value1;
	end
	if (tx_data_rs232phytx_next_value_ce2) begin
		tx_data <= tx_data_rs232phytx_next_value2;
	end
	rx_rx_d <= rx_rx;
	{rx_tick, rx_phase} <= 32'd2147483648;
	if (rx_enable) begin
		{rx_tick, rx_phase} <= (rx_phase + 23'd4947802);
	end
	rs232phyrx_state <= rs232phyrx_next_state;
	if (rx_count_rs232phyrx_next_value_ce0) begin
		rx_count <= rx_count_rs232phyrx_next_value0;
	end
	if (rx_data_rs232phyrx_next_value_ce1) begin
		rx_data <= rx_data_rs232phyrx_next_value1;
	end
	if (uart_tx_clear) begin
		uart_tx_pending <= 1'd0;
	end
	uart_tx_trigger_d <= uart_tx_trigger;
	if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
		uart_tx_pending <= 1'd1;
	end
	if (uart_rx_clear) begin
		uart_rx_pending <= 1'd0;
	end
	uart_rx_trigger_d <= uart_rx_trigger;
	if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
		uart_rx_pending <= 1'd1;
	end
	if (uart_tx_fifo_syncfifo_re) begin
		uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (uart_tx_fifo_re) begin
			uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
	end
	if (uart_tx_fifo_do_read) begin
		uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		if ((~uart_tx_fifo_do_read)) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_tx_fifo_do_read) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (uart_rx_fifo_syncfifo_re) begin
		uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (uart_rx_fifo_re) begin
			uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
	end
	if (uart_rx_fifo_do_read) begin
		uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		if ((~uart_rx_fifo_do_read)) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_rx_fifo_do_read) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (timer_en_storage) begin
		if ((timer_value == 1'd0)) begin
			timer_value <= timer_reload_storage;
		end else begin
			timer_value <= (timer_value - 1'd1);
		end
	end else begin
		timer_value <= timer_load_storage;
	end
	if (timer_update_value_re) begin
		timer_value_status <= timer_value;
	end
	if (timer_zero_clear) begin
		timer_zero_pending <= 1'd0;
	end
	timer_zero_trigger_d <= timer_zero_trigger;
	if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
		timer_zero_pending <= 1'd1;
	end
	if ((dgt_tick_count >= 18'd199999)) begin
		dgt_tick_count <= 1'd0;
		dgt_tick <= 1'd1;
	end else begin
		dgt_tick_count <= (dgt_tick_count + 1'd1);
		dgt_tick <= 1'd0;
	end
	if (dgt_tick) begin
		if ((dgt_count >= 3'd7)) begin
			dgt_count <= 1'd0;
		end else begin
			dgt_count <= (dgt_count + 1'd1);
		end
	end
	if (ledRGB_1_r_enable) begin
		ledRGB_1_r_counter <= (ledRGB_1_r_counter + 1'd1);
		if ((ledRGB_1_r_counter < ledRGB_1_r_width)) begin
			ledRGB1_r <= 1'd1;
		end else begin
			ledRGB1_r <= 1'd0;
		end
		if ((ledRGB_1_r_counter >= (ledRGB_1_r_period - 1'd1))) begin
			ledRGB_1_r_counter <= 1'd0;
		end
	end else begin
		ledRGB_1_r_counter <= 1'd0;
		ledRGB1_r <= 1'd0;
	end
	if (ledRGB_1_g_enable) begin
		ledRGB_1_g_counter <= (ledRGB_1_g_counter + 1'd1);
		if ((ledRGB_1_g_counter < ledRGB_1_g_width)) begin
			ledRGB1_g <= 1'd1;
		end else begin
			ledRGB1_g <= 1'd0;
		end
		if ((ledRGB_1_g_counter >= (ledRGB_1_g_period - 1'd1))) begin
			ledRGB_1_g_counter <= 1'd0;
		end
	end else begin
		ledRGB_1_g_counter <= 1'd0;
		ledRGB1_g <= 1'd0;
	end
	if (ledRGB_1_b_enable) begin
		ledRGB_1_b_counter <= (ledRGB_1_b_counter + 1'd1);
		if ((ledRGB_1_b_counter < ledRGB_1_b_width)) begin
			ledRGB1_b <= 1'd1;
		end else begin
			ledRGB1_b <= 1'd0;
		end
		if ((ledRGB_1_b_counter >= (ledRGB_1_b_period - 1'd1))) begin
			ledRGB_1_b_counter <= 1'd0;
		end
	end else begin
		ledRGB_1_b_counter <= 1'd0;
		ledRGB1_b <= 1'd0;
	end
	if (ledRGB_2_r_enable) begin
		ledRGB_2_r_counter <= (ledRGB_2_r_counter + 1'd1);
		if ((ledRGB_2_r_counter < ledRGB_2_r_width)) begin
			ledRGB2_r <= 1'd1;
		end else begin
			ledRGB2_r <= 1'd0;
		end
		if ((ledRGB_2_r_counter >= (ledRGB_2_r_period - 1'd1))) begin
			ledRGB_2_r_counter <= 1'd0;
		end
	end else begin
		ledRGB_2_r_counter <= 1'd0;
		ledRGB2_r <= 1'd0;
	end
	if (ledRGB_2_g_enable) begin
		ledRGB_2_g_counter <= (ledRGB_2_g_counter + 1'd1);
		if ((ledRGB_2_g_counter < ledRGB_2_g_width)) begin
			ledRGB2_g <= 1'd1;
		end else begin
			ledRGB2_g <= 1'd0;
		end
		if ((ledRGB_2_g_counter >= (ledRGB_2_g_period - 1'd1))) begin
			ledRGB_2_g_counter <= 1'd0;
		end
	end else begin
		ledRGB_2_g_counter <= 1'd0;
		ledRGB2_g <= 1'd0;
	end
	if (ledRGB_2_b_enable) begin
		ledRGB_2_b_counter <= (ledRGB_2_b_counter + 1'd1);
		if ((ledRGB_2_b_counter < ledRGB_2_b_width)) begin
			ledRGB2_b <= 1'd1;
		end else begin
			ledRGB2_b <= 1'd0;
		end
		if ((ledRGB_2_b_counter >= (ledRGB_2_b_period - 1'd1))) begin
			ledRGB_2_b_counter <= 1'd0;
		end
	end else begin
		ledRGB_2_b_counter <= 1'd0;
		ledRGB2_b <= 1'd0;
	end
	state <= next_state;
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	interface0_bank_bus_dat_r <= 1'd0;
	if (csrbank0_sel) begin
		case (interface0_bank_bus_adr[8:0])
			1'd0: begin
				interface0_bank_bus_dat_r <= csrbank0_in_w;
			end
		endcase
	end
	buttons_re <= csrbank0_in_re;
	interface1_bank_bus_dat_r <= 1'd0;
	if (csrbank1_sel) begin
		case (interface1_bank_bus_adr[8:0])
			1'd0: begin
				interface1_bank_bus_dat_r <= csrbank1_enable0_w;
			end
		endcase
	end
	if (csrbank1_enable0_re) begin
		camara_cntrl_storage <= csrbank1_enable0_r;
	end
	camara_cntrl_re <= csrbank1_enable0_re;
	interface2_bank_bus_dat_r <= 1'd0;
	if (csrbank2_sel) begin
		case (interface2_bank_bus_adr[8:0])
			1'd0: begin
				interface2_bank_bus_dat_r <= csrbank2_reset0_w;
			end
			1'd1: begin
				interface2_bank_bus_dat_r <= csrbank2_scratch0_w;
			end
			2'd2: begin
				interface2_bank_bus_dat_r <= csrbank2_bus_errors_w;
			end
		endcase
	end
	if (csrbank2_reset0_re) begin
		reset_storage[1:0] <= csrbank2_reset0_r;
	end
	reset_re <= csrbank2_reset0_re;
	if (csrbank2_scratch0_re) begin
		scratch_storage[31:0] <= csrbank2_scratch0_r;
	end
	scratch_re <= csrbank2_scratch0_re;
	bus_errors_re <= csrbank2_bus_errors_re;
	interface3_bank_bus_dat_r <= 1'd0;
	if (csrbank3_sel) begin
		case (interface3_bank_bus_adr[8:0])
			1'd0: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_00_w;
			end
			1'd1: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_10_w;
			end
			2'd2: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_20_w;
			end
			2'd3: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_30_w;
			end
			3'd4: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_40_w;
			end
			3'd5: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_50_w;
			end
			3'd6: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_60_w;
			end
			3'd7: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_70_w;
			end
		endcase
	end
	if (csrbank3_dig_00_re) begin
		dig_0_storage[7:0] <= csrbank3_dig_00_r;
	end
	dig_0_re <= csrbank3_dig_00_re;
	if (csrbank3_dig_10_re) begin
		dig_1_storage[7:0] <= csrbank3_dig_10_r;
	end
	dig_1_re <= csrbank3_dig_10_re;
	if (csrbank3_dig_20_re) begin
		dig_2_storage[7:0] <= csrbank3_dig_20_r;
	end
	dig_2_re <= csrbank3_dig_20_re;
	if (csrbank3_dig_30_re) begin
		dig_3_storage[7:0] <= csrbank3_dig_30_r;
	end
	dig_3_re <= csrbank3_dig_30_re;
	if (csrbank3_dig_40_re) begin
		dig_4_storage[7:0] <= csrbank3_dig_40_r;
	end
	dig_4_re <= csrbank3_dig_40_re;
	if (csrbank3_dig_50_re) begin
		dig_5_storage[7:0] <= csrbank3_dig_50_r;
	end
	dig_5_re <= csrbank3_dig_50_re;
	if (csrbank3_dig_60_re) begin
		dig_6_storage[7:0] <= csrbank3_dig_60_r;
	end
	dig_6_re <= csrbank3_dig_60_re;
	if (csrbank3_dig_70_re) begin
		dig_7_storage[7:0] <= csrbank3_dig_70_r;
	end
	dig_7_re <= csrbank3_dig_70_re;
	interface4_bank_bus_dat_r <= 1'd0;
	if (csrbank4_sel) begin
		case (interface4_bank_bus_adr[8:0])
			1'd0: begin
				interface4_bank_bus_dat_r <= csrbank4_distancia_w;
			end
		endcase
	end
	infrarrojo_cntrl_re <= csrbank4_distancia_re;
	interface5_bank_bus_dat_r <= 1'd0;
	if (csrbank5_sel) begin
		case (interface5_bank_bus_adr[8:0])
			1'd0: begin
				interface5_bank_bus_dat_r <= csrbank5_r_enable0_w;
			end
			1'd1: begin
				interface5_bank_bus_dat_r <= csrbank5_r_width0_w;
			end
			2'd2: begin
				interface5_bank_bus_dat_r <= csrbank5_r_period0_w;
			end
			2'd3: begin
				interface5_bank_bus_dat_r <= csrbank5_g_enable0_w;
			end
			3'd4: begin
				interface5_bank_bus_dat_r <= csrbank5_g_width0_w;
			end
			3'd5: begin
				interface5_bank_bus_dat_r <= csrbank5_g_period0_w;
			end
			3'd6: begin
				interface5_bank_bus_dat_r <= csrbank5_b_enable0_w;
			end
			3'd7: begin
				interface5_bank_bus_dat_r <= csrbank5_b_width0_w;
			end
			4'd8: begin
				interface5_bank_bus_dat_r <= csrbank5_b_period0_w;
			end
		endcase
	end
	if (csrbank5_r_enable0_re) begin
		ledRGB_1_r_enable_storage <= csrbank5_r_enable0_r;
	end
	ledRGB_1_r_enable_re <= csrbank5_r_enable0_re;
	if (csrbank5_r_width0_re) begin
		ledRGB_1_r_width_storage[31:0] <= csrbank5_r_width0_r;
	end
	ledRGB_1_r_width_re <= csrbank5_r_width0_re;
	if (csrbank5_r_period0_re) begin
		ledRGB_1_r_period_storage[31:0] <= csrbank5_r_period0_r;
	end
	ledRGB_1_r_period_re <= csrbank5_r_period0_re;
	if (csrbank5_g_enable0_re) begin
		ledRGB_1_g_enable_storage <= csrbank5_g_enable0_r;
	end
	ledRGB_1_g_enable_re <= csrbank5_g_enable0_re;
	if (csrbank5_g_width0_re) begin
		ledRGB_1_g_width_storage[31:0] <= csrbank5_g_width0_r;
	end
	ledRGB_1_g_width_re <= csrbank5_g_width0_re;
	if (csrbank5_g_period0_re) begin
		ledRGB_1_g_period_storage[31:0] <= csrbank5_g_period0_r;
	end
	ledRGB_1_g_period_re <= csrbank5_g_period0_re;
	if (csrbank5_b_enable0_re) begin
		ledRGB_1_b_enable_storage <= csrbank5_b_enable0_r;
	end
	ledRGB_1_b_enable_re <= csrbank5_b_enable0_re;
	if (csrbank5_b_width0_re) begin
		ledRGB_1_b_width_storage[31:0] <= csrbank5_b_width0_r;
	end
	ledRGB_1_b_width_re <= csrbank5_b_width0_re;
	if (csrbank5_b_period0_re) begin
		ledRGB_1_b_period_storage[31:0] <= csrbank5_b_period0_r;
	end
	ledRGB_1_b_period_re <= csrbank5_b_period0_re;
	interface6_bank_bus_dat_r <= 1'd0;
	if (csrbank6_sel) begin
		case (interface6_bank_bus_adr[8:0])
			1'd0: begin
				interface6_bank_bus_dat_r <= csrbank6_r_enable0_w;
			end
			1'd1: begin
				interface6_bank_bus_dat_r <= csrbank6_r_width0_w;
			end
			2'd2: begin
				interface6_bank_bus_dat_r <= csrbank6_r_period0_w;
			end
			2'd3: begin
				interface6_bank_bus_dat_r <= csrbank6_g_enable0_w;
			end
			3'd4: begin
				interface6_bank_bus_dat_r <= csrbank6_g_width0_w;
			end
			3'd5: begin
				interface6_bank_bus_dat_r <= csrbank6_g_period0_w;
			end
			3'd6: begin
				interface6_bank_bus_dat_r <= csrbank6_b_enable0_w;
			end
			3'd7: begin
				interface6_bank_bus_dat_r <= csrbank6_b_width0_w;
			end
			4'd8: begin
				interface6_bank_bus_dat_r <= csrbank6_b_period0_w;
			end
		endcase
	end
	if (csrbank6_r_enable0_re) begin
		ledRGB_2_r_enable_storage <= csrbank6_r_enable0_r;
	end
	ledRGB_2_r_enable_re <= csrbank6_r_enable0_re;
	if (csrbank6_r_width0_re) begin
		ledRGB_2_r_width_storage[31:0] <= csrbank6_r_width0_r;
	end
	ledRGB_2_r_width_re <= csrbank6_r_width0_re;
	if (csrbank6_r_period0_re) begin
		ledRGB_2_r_period_storage[31:0] <= csrbank6_r_period0_r;
	end
	ledRGB_2_r_period_re <= csrbank6_r_period0_re;
	if (csrbank6_g_enable0_re) begin
		ledRGB_2_g_enable_storage <= csrbank6_g_enable0_r;
	end
	ledRGB_2_g_enable_re <= csrbank6_g_enable0_re;
	if (csrbank6_g_width0_re) begin
		ledRGB_2_g_width_storage[31:0] <= csrbank6_g_width0_r;
	end
	ledRGB_2_g_width_re <= csrbank6_g_width0_re;
	if (csrbank6_g_period0_re) begin
		ledRGB_2_g_period_storage[31:0] <= csrbank6_g_period0_r;
	end
	ledRGB_2_g_period_re <= csrbank6_g_period0_re;
	if (csrbank6_b_enable0_re) begin
		ledRGB_2_b_enable_storage <= csrbank6_b_enable0_r;
	end
	ledRGB_2_b_enable_re <= csrbank6_b_enable0_re;
	if (csrbank6_b_width0_re) begin
		ledRGB_2_b_width_storage[31:0] <= csrbank6_b_width0_r;
	end
	ledRGB_2_b_width_re <= csrbank6_b_width0_re;
	if (csrbank6_b_period0_re) begin
		ledRGB_2_b_period_storage[31:0] <= csrbank6_b_period0_r;
	end
	ledRGB_2_b_period_re <= csrbank6_b_period0_re;
	interface7_bank_bus_dat_r <= 1'd0;
	if (csrbank7_sel) begin
		case (interface7_bank_bus_adr[8:0])
			1'd0: begin
				interface7_bank_bus_dat_r <= csrbank7_out0_w;
			end
		endcase
	end
	if (csrbank7_out0_re) begin
		leds_storage[9:0] <= csrbank7_out0_r;
	end
	leds_re <= csrbank7_out0_re;
	interface8_bank_bus_dat_r <= 1'd0;
	if (csrbank8_sel) begin
		case (interface8_bank_bus_adr[8:0])
			1'd0: begin
				interface8_bank_bus_dat_r <= csrbank8_entrada0_w;
			end
		endcase
	end
	if (csrbank8_entrada0_re) begin
		motor_storage[3:0] <= csrbank8_entrada0_r;
	end
	motor_re <= csrbank8_entrada0_re;
	interface9_bank_bus_dat_r <= 1'd0;
	if (csrbank9_sel) begin
		case (interface9_bank_bus_adr[8:0])
			1'd0: begin
				interface9_bank_bus_dat_r <= csrbank9_pasar10_w;
			end
		endcase
	end
	if (csrbank9_pasar10_re) begin
		mp3_storage <= csrbank9_pasar10_r;
	end
	mp3_re <= csrbank9_pasar10_re;
	interface10_bank_bus_dat_r <= 1'd0;
	if (csrbank10_sel) begin
		case (interface10_bank_bus_adr[8:0])
			1'd0: begin
				interface10_bank_bus_dat_r <= csrbank10_orden0_w;
			end
		endcase
	end
	if (csrbank10_orden0_re) begin
		pwm_cntrl_storage[2:0] <= csrbank10_orden0_r;
	end
	pwm_cntrl_re <= csrbank10_orden0_re;
	interface11_bank_bus_dat_r <= 1'd0;
	if (csrbank11_sel) begin
		case (interface11_bank_bus_adr[8:0])
			1'd0: begin
				interface11_bank_bus_dat_r <= csrbank11_in_w;
			end
		endcase
	end
	switchs_re <= csrbank11_in_re;
	interface12_bank_bus_dat_r <= 1'd0;
	if (csrbank12_sel) begin
		case (interface12_bank_bus_adr[8:0])
			1'd0: begin
				interface12_bank_bus_dat_r <= csrbank12_load0_w;
			end
			1'd1: begin
				interface12_bank_bus_dat_r <= csrbank12_reload0_w;
			end
			2'd2: begin
				interface12_bank_bus_dat_r <= csrbank12_en0_w;
			end
			2'd3: begin
				interface12_bank_bus_dat_r <= csrbank12_update_value0_w;
			end
			3'd4: begin
				interface12_bank_bus_dat_r <= csrbank12_value_w;
			end
			3'd5: begin
				interface12_bank_bus_dat_r <= csrbank12_ev_status_w;
			end
			3'd6: begin
				interface12_bank_bus_dat_r <= csrbank12_ev_pending_w;
			end
			3'd7: begin
				interface12_bank_bus_dat_r <= csrbank12_ev_enable0_w;
			end
		endcase
	end
	if (csrbank12_load0_re) begin
		timer_load_storage[31:0] <= csrbank12_load0_r;
	end
	timer_load_re <= csrbank12_load0_re;
	if (csrbank12_reload0_re) begin
		timer_reload_storage[31:0] <= csrbank12_reload0_r;
	end
	timer_reload_re <= csrbank12_reload0_re;
	if (csrbank12_en0_re) begin
		timer_en_storage <= csrbank12_en0_r;
	end
	timer_en_re <= csrbank12_en0_re;
	if (csrbank12_update_value0_re) begin
		timer_update_value_storage <= csrbank12_update_value0_r;
	end
	timer_update_value_re <= csrbank12_update_value0_re;
	timer_value_re <= csrbank12_value_re;
	timer_status_re <= csrbank12_ev_status_re;
	if (csrbank12_ev_pending_re) begin
		timer_pending_r <= csrbank12_ev_pending_r;
	end
	timer_pending_re <= csrbank12_ev_pending_re;
	if (csrbank12_ev_enable0_re) begin
		timer_enable_storage <= csrbank12_ev_enable0_r;
	end
	timer_enable_re <= csrbank12_ev_enable0_re;
	interface13_bank_bus_dat_r <= 1'd0;
	if (csrbank13_sel) begin
		case (interface13_bank_bus_adr[8:0])
			1'd0: begin
				interface13_bank_bus_dat_r <= uart_rxtx_w;
			end
			1'd1: begin
				interface13_bank_bus_dat_r <= csrbank13_txfull_w;
			end
			2'd2: begin
				interface13_bank_bus_dat_r <= csrbank13_rxempty_w;
			end
			2'd3: begin
				interface13_bank_bus_dat_r <= csrbank13_ev_status_w;
			end
			3'd4: begin
				interface13_bank_bus_dat_r <= csrbank13_ev_pending_w;
			end
			3'd5: begin
				interface13_bank_bus_dat_r <= csrbank13_ev_enable0_w;
			end
			3'd6: begin
				interface13_bank_bus_dat_r <= csrbank13_txempty_w;
			end
			3'd7: begin
				interface13_bank_bus_dat_r <= csrbank13_rxfull_w;
			end
		endcase
	end
	uart_txfull_re <= csrbank13_txfull_re;
	uart_rxempty_re <= csrbank13_rxempty_re;
	uart_status_re <= csrbank13_ev_status_re;
	if (csrbank13_ev_pending_re) begin
		uart_pending_r[1:0] <= csrbank13_ev_pending_r;
	end
	uart_pending_re <= csrbank13_ev_pending_re;
	if (csrbank13_ev_enable0_re) begin
		uart_enable_storage[1:0] <= csrbank13_ev_enable0_r;
	end
	uart_enable_re <= csrbank13_ev_enable0_re;
	uart_txempty_re <= csrbank13_txempty_re;
	uart_rxfull_re <= csrbank13_rxfull_re;
	interface14_bank_bus_dat_r <= 1'd0;
	if (csrbank14_sel) begin
		case (interface14_bank_bus_adr[8:0])
			1'd0: begin
				interface14_bank_bus_dat_r <= csrbank14_orden0_w;
			end
			1'd1: begin
				interface14_bank_bus_dat_r <= csrbank14_done_w;
			end
			2'd2: begin
				interface14_bank_bus_dat_r <= csrbank14_d_w;
			end
		endcase
	end
	if (csrbank14_orden0_re) begin
		orden_storage <= csrbank14_orden0_r;
	end
	orden_re <= csrbank14_orden0_re;
	done_re <= csrbank14_done_re;
	d_re <= csrbank14_d_re;
	if (sys_rst) begin
		reset_storage <= 2'd0;
		reset_re <= 1'd0;
		scratch_storage <= 32'd305419896;
		scratch_re <= 1'd0;
		bus_errors_re <= 1'd0;
		bus_errors <= 32'd0;
		ram_bus_ack <= 1'd0;
		interface0_ram_bus_ack <= 1'd0;
		interface1_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd0;
		tx_tick <= 1'd0;
		rx_tick <= 1'd0;
		rx_rx_d <= 1'd0;
		uart_txfull_re <= 1'd0;
		uart_rxempty_re <= 1'd0;
		uart_tx_pending <= 1'd0;
		uart_tx_trigger_d <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_trigger_d <= 1'd0;
		uart_status_re <= 1'd0;
		uart_pending_re <= 1'd0;
		uart_pending_r <= 2'd0;
		uart_enable_storage <= 2'd0;
		uart_enable_re <= 1'd0;
		uart_txempty_re <= 1'd0;
		uart_rxfull_re <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
		timer_load_storage <= 32'd0;
		timer_load_re <= 1'd0;
		timer_reload_storage <= 32'd0;
		timer_reload_re <= 1'd0;
		timer_en_storage <= 1'd0;
		timer_en_re <= 1'd0;
		timer_update_value_storage <= 1'd0;
		timer_update_value_re <= 1'd0;
		timer_value_status <= 32'd0;
		timer_value_re <= 1'd0;
		timer_zero_pending <= 1'd0;
		timer_zero_trigger_d <= 1'd0;
		timer_status_re <= 1'd0;
		timer_pending_re <= 1'd0;
		timer_pending_r <= 1'd0;
		timer_enable_storage <= 1'd0;
		timer_enable_re <= 1'd0;
		timer_value <= 32'd0;
		leds_storage <= 10'd0;
		leds_re <= 1'd0;
		switchs_re <= 1'd0;
		buttons_re <= 1'd0;
		dgt_count <= 3'd0;
		dgt_tick <= 1'd0;
		dgt_tick_count <= 18'd0;
		dig_0_storage <= 8'd0;
		dig_0_re <= 1'd0;
		dig_1_storage <= 8'd0;
		dig_1_re <= 1'd0;
		dig_2_storage <= 8'd0;
		dig_2_re <= 1'd0;
		dig_3_storage <= 8'd0;
		dig_3_re <= 1'd0;
		dig_4_storage <= 8'd0;
		dig_4_re <= 1'd0;
		dig_5_storage <= 8'd0;
		dig_5_re <= 1'd0;
		dig_6_storage <= 8'd0;
		dig_6_re <= 1'd0;
		dig_7_storage <= 8'd0;
		dig_7_re <= 1'd0;
		ledRGB1_r <= 1'd0;
		ledRGB1_g <= 1'd0;
		ledRGB1_b <= 1'd0;
		ledRGB_1_r_enable_storage <= 1'd0;
		ledRGB_1_r_enable_re <= 1'd0;
		ledRGB_1_r_width_re <= 1'd0;
		ledRGB_1_r_period_re <= 1'd0;
		ledRGB_1_g_enable_storage <= 1'd0;
		ledRGB_1_g_enable_re <= 1'd0;
		ledRGB_1_g_width_re <= 1'd0;
		ledRGB_1_g_period_re <= 1'd0;
		ledRGB_1_b_enable_storage <= 1'd0;
		ledRGB_1_b_enable_re <= 1'd0;
		ledRGB_1_b_width_re <= 1'd0;
		ledRGB_1_b_period_re <= 1'd0;
		ledRGB2_r <= 1'd0;
		ledRGB2_g <= 1'd0;
		ledRGB2_b <= 1'd0;
		ledRGB_2_r_enable_storage <= 1'd0;
		ledRGB_2_r_enable_re <= 1'd0;
		ledRGB_2_r_width_re <= 1'd0;
		ledRGB_2_r_period_re <= 1'd0;
		ledRGB_2_g_enable_storage <= 1'd0;
		ledRGB_2_g_enable_re <= 1'd0;
		ledRGB_2_g_width_re <= 1'd0;
		ledRGB_2_g_period_re <= 1'd0;
		ledRGB_2_b_enable_storage <= 1'd0;
		ledRGB_2_b_enable_re <= 1'd0;
		ledRGB_2_b_width_re <= 1'd0;
		ledRGB_2_b_period_re <= 1'd0;
		pwm_cntrl_storage <= 3'd0;
		pwm_cntrl_re <= 1'd0;
		infrarrojo_cntrl_re <= 1'd0;
		orden_storage <= 1'd0;
		orden_re <= 1'd0;
		done_re <= 1'd0;
		d_re <= 1'd0;
		mp3_storage <= 1'd0;
		mp3_re <= 1'd0;
		motor_storage <= 4'd0;
		motor_re <= 1'd0;
		camara_cntrl_storage <= 1'd0;
		camara_cntrl_re <= 1'd0;
		rs232phytx_state <= 1'd0;
		rs232phyrx_state <= 1'd0;
		slave_sel_r <= 4'd0;
		count <= 20'd1000000;
		state <= 1'd0;
	end
	xilinxmultiregimpl0_regs0 <= serial_rx;
	xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
	xilinxmultiregimpl1_regs0 <= {sw7, sw6, sw5, sw4, sw3, sw2, sw1, sw0};
	xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
	xilinxmultiregimpl2_regs0 <= {btnl, btnr, btnc};
	xilinxmultiregimpl2_regs1 <= xilinxmultiregimpl2_regs0;
end

reg [31:0] mem[0:5794];
reg [31:0] memdat;
always @(posedge sys_clk) begin
	memdat <= mem[adr];
end

assign dat_r = memdat;

initial begin
	$readmemh("mem.init", mem);
end

reg [31:0] mem_1[0:2047];
reg [10:0] memadr;
always @(posedge sys_clk) begin
	if (sram0_we[0])
		mem_1[sram0_adr][7:0] <= sram0_dat_w[7:0];
	if (sram0_we[1])
		mem_1[sram0_adr][15:8] <= sram0_dat_w[15:8];
	if (sram0_we[2])
		mem_1[sram0_adr][23:16] <= sram0_dat_w[23:16];
	if (sram0_we[3])
		mem_1[sram0_adr][31:24] <= sram0_dat_w[31:24];
	memadr <= sram0_adr;
end

assign sram0_dat_r = mem_1[memadr];

initial begin
	$readmemh("mem_1.init", mem_1);
end

reg [31:0] mem_2[0:4095];
reg [11:0] memadr_1;
always @(posedge sys_clk) begin
	if (sram1_we[0])
		mem_2[sram1_adr][7:0] <= sram1_dat_w[7:0];
	if (sram1_we[1])
		mem_2[sram1_adr][15:8] <= sram1_dat_w[15:8];
	if (sram1_we[2])
		mem_2[sram1_adr][23:16] <= sram1_dat_w[23:16];
	if (sram1_we[3])
		mem_2[sram1_adr][31:24] <= sram1_dat_w[31:24];
	memadr_1 <= sram1_adr;
end

assign sram1_dat_r = mem_2[memadr_1];

initial begin
	$readmemh("mem_2.init", mem_2);
end

reg [9:0] storage[0:15];
reg [9:0] memdat_1;
reg [9:0] memdat_2;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	memdat_1 <= storage[uart_tx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		memdat_2 <= storage[uart_tx_fifo_rdport_adr];
end

assign uart_tx_fifo_wrport_dat_r = memdat_1;
assign uart_tx_fifo_rdport_dat_r = memdat_2;

reg [9:0] storage_1[0:15];
reg [9:0] memdat_3;
reg [9:0] memdat_4;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	memdat_3 <= storage_1[uart_rx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		memdat_4 <= storage_1[uart_rx_fifo_rdport_adr];
end

assign uart_rx_fifo_wrport_dat_r = memdat_3;
assign uart_rx_fifo_rdport_dat_r = memdat_4;

BloquePWM BloquePWM(
	.clk(sys_clk),
	.orden(pwm_cntrl_storage),
	.pwm(pwm)
);

modulo_ir modulo_ir(
	.clk(sys_clk),
	.rst(sys_rst),
	.ir_io(ir_inout),
	.distancia(infrarrojo_cntrl_status)
);

bloqueultrasonido bloqueultrasonido(
	.clk(sys_clk),
	.echo(us_echo),
	.orden(orden_storage),
	.rst(sys_rst),
	.d(d_status),
	.done(done_status),
	.trigger(us_trigger)
);

MP3 MP3(
	.clk(sys_clk),
	.pasar1(mp3_storage),
	.salida1(salida1)
);

motores motores(
	.clk(sys_clk),
	.entrada(motor_storage),
	.salida({motor_carro3, motor_carro2, motor_carro1, motor_carro0})
);

test_cam test_cam(
	.CAM_pclk(cam_pclk),
	.CAM_px_data({cam_data_in7, cam_data_in6, cam_data_in5, cam_data_in4, cam_data_in3, cam_data_in2, cam_data_in1, cam_data_in0}),
	.clk(sys_clk),
	.enable(camara_cntrl_storage),
	.rst(sys_rst),
	.CAM_href(cam_href),
	.CAM_vsync(cam_vsync),
	.CAM_xclk(cam_xclk),
	.VGA_B({vga_blue3, vga_blue2, vga_blue1, vga_blue0}),
	.VGA_G({vga_green3, vga_green2, vga_green1, vga_green0}),
	.VGA_Hsync_n(vga_hsync),
	.VGA_R({vga_red3, vga_red2, vga_red1, vga_red0}),
	.VGA_Vsync_n(vga_vsync)
);

picorv32 #(
	.CATCH_ILLINSN(1'd1),
	.CATCH_MISALIGN(1'd1),
	.ENABLE_COUNTERS(1'd1),
	.ENABLE_COUNTERS64(1'd1),
	.ENABLE_DIV(1'd1),
	.ENABLE_FAST_MUL(1'd0),
	.ENABLE_IRQ(1'd1),
	.ENABLE_IRQ_QREGS(1'd1),
	.ENABLE_IRQ_TIMER(1'd1),
	.ENABLE_MUL(1'd1),
	.ENABLE_PCPI(1'd0),
	.ENABLE_REGS_16_31(1'd1),
	.ENABLE_REGS_DUALPORT(1'd1),
	.ENABLE_TRACE(1'd0),
	.LATCHED_IRQ(32'd4294967295),
	.LATCHED_MEM_RDATA(1'd0),
	.MASKED_IRQ(1'd0),
	.PROGADDR_IRQ(5'd16),
	.PROGADDR_RESET(1'd0),
	.STACKADDR(32'd4294967295),
	.TWO_CYCLE_ALU(1'd0),
	.TWO_CYCLE_COMPARE(1'd0),
	.TWO_STAGE_SHIFT(1'd1)
) picorv32 (
	.clk(sys_clk),
	.irq(picorv32_interrupt),
	.mem_rdata(picorv32_mem_rdata),
	.mem_ready(picorv32_mem_ready),
	.pcpi_rd(1'd0),
	.pcpi_ready(1'd0),
	.pcpi_wait(1'd0),
	.pcpi_wr(1'd0),
	.resetn((~(sys_rst | picorv32_reset))),
	.eoi(picorv329),
	.mem_addr(picorv32_mem_addr),
	.mem_instr(picorv32_mem_instr),
	.mem_la_addr(picorv322),
	.mem_la_read(picorv320),
	.mem_la_wdata(picorv323),
	.mem_la_write(picorv321),
	.mem_la_wstrb(picorv324),
	.mem_valid(picorv32_mem_valid),
	.mem_wdata(picorv32_mem_wdata),
	.mem_wstrb(picorv32_mem_wstrb),
	.pcpi_insn(picorv326),
	.pcpi_rs1(picorv327),
	.pcpi_rs2(picorv328),
	.pcpi_valid(picorv325),
	.trap(picorv32_trap)
);

endmodule
